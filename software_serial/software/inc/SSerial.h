/*this library has been edited to be compatible with hal api and libraries which CUBEMX generates//
  this library needs TIM4 for timing the receiving data and external interrupt for TX pin//
  for having delay less than 1ms for transmiting data we need TIM1//

  --------start using this lib------->>>>>>>>>
  1.copy folder "software" to your project next to folder "Drivers" generated by cubemx
  2.enable HSEI and enable pll boost frequency to 72 MHZ
  3.enable TIM1 : set prescaler 71 and set counter period 9 and enable update interrupt | not any other changes for TIM1.
  4.generate your project
  5.include "../software/inc/SSerial.h" in main.c
  6.we need a variable for counting so define "int soft_counter" in main.c and "extern int soft_counter" in main.h
  7.write "soft_counter++;" in update interrupt of TIM1 that you have enabled in stm32f1xx_it.c.
  8.init software serial by this function "Init_SSerial()"
  for example -> Init_SSerial(GPIOB, GPIO_PIN_13, GPIOB, GPIO_PIN_14, GPIO_PortSourceGPIOB, GPIO_PinSource14, EXTI_Line14, EXTI15_10_IRQn);

  good job
  now if any data comes it will be stored in USART_buf by interrupt and you can read it.
  global variable "len" shows you have many data is received.
  functions "USART_Send" send data on software serial port tx
  //////////////////////////////////////////////////////////////
   example :
   tx: gpio portB pin 14
   rx: gpio portB pin 13

   program :receive 10 char and echo buffer;


 */


#ifndef __SOFTWARESERIAL__
#define __SOFTWARESERIAL__

#include "delay.h"
#include "misc.h"
#include "exti.h"
#include "gpio.h"
#include "extention.h"
#include "soft_rcc.h"
#include "soft_time.h"
#include "sys.h"
#include "../../Inc/main.h"


#define OI_TXD	PBout(13)
#define OI_RXD	PBin(14)

#define BuadRate_9600	100



extern u8 len;	//���ռ���
extern u8 USART_buf[11];  //���ջ�����

extern u8 recvStat;
extern u8 recvData;

void IOConfig(GPIO_TypeDef *TX_PORT,uint16_t GPIO_PIN_TX,  GPIO_TypeDef *RX_PORT, uint16_t GPIO_PIN_RX,
		uint8_t GPIO_PortSourcRX, uint8_t GPIO_PinSourceRX,  uint32_t EXTI_LineRX, IRQn_Type* NVIC_IRQChannelRX);
void TIM4_Int_Init(u16 arr,u16 psc);
void IO_TXD(u8 Data);
void USART_Send(u8 *buf, u8 len);
void Init_SSerial(GPIO_TypeDef *TX_PORT,uint16_t GPIO_PIN_TX,  GPIO_TypeDef *RX_PORT, uint16_t GPIO_PIN_RX,
		uint8_t GPIO_PortSourcRX, uint8_t GPIO_PinSourceRX,  uint32_t EXTI_LineRX, IRQn_Type* NVIC_IRQChannelRX);
#endif
