
fsociety_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023b8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080024c4  080024c4  000124c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024e8  080024e8  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080024e8  080024e8  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080024e8  080024e8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080024e8  080024e8  000124e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080024ec  080024ec  000124ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080024f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  20000010  08002500  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000084  08002500  00020084  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013cdc  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002715  00000000  00000000  00033d15  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a08  00000000  00000000  00036430  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008f0  00000000  00000000  00036e38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001689b  00000000  00000000  00037728  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000aa06  00000000  00000000  0004dfc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00071f27  00000000  00000000  000589c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ca8f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002728  00000000  00000000  000ca96c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	080024ac 	.word	0x080024ac

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	080024ac 	.word	0x080024ac

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 f91f 	bl	80003a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f001 fbc8 	bl	80018fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 f937 	bl	800040a <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295
 80001b4:	f000 f8ff 	bl	80003b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	20000040 	.word	0x20000040

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	20000040 	.word	0x20000040

08000210 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000210:	b480      	push	{r7}
 8000212:	b085      	sub	sp, #20
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	f003 0307 	and.w	r3, r3, #7
 800021e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000220:	4b0c      	ldr	r3, [pc, #48]	; (8000254 <NVIC_SetPriorityGrouping+0x44>)
 8000222:	68db      	ldr	r3, [r3, #12]
 8000224:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000226:	68ba      	ldr	r2, [r7, #8]
 8000228:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800022c:	4013      	ands	r3, r2
 800022e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000234:	68bb      	ldr	r3, [r7, #8]
 8000236:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000238:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800023c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000240:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000242:	4a04      	ldr	r2, [pc, #16]	; (8000254 <NVIC_SetPriorityGrouping+0x44>)
 8000244:	68bb      	ldr	r3, [r7, #8]
 8000246:	60d3      	str	r3, [r2, #12]
}
 8000248:	bf00      	nop
 800024a:	3714      	adds	r7, #20
 800024c:	46bd      	mov	sp, r7
 800024e:	bc80      	pop	{r7}
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	e000ed00 	.word	0xe000ed00

08000258 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000258:	b480      	push	{r7}
 800025a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800025c:	4b04      	ldr	r3, [pc, #16]	; (8000270 <NVIC_GetPriorityGrouping+0x18>)
 800025e:	68db      	ldr	r3, [r3, #12]
 8000260:	0a1b      	lsrs	r3, r3, #8
 8000262:	f003 0307 	and.w	r3, r3, #7
}
 8000266:	4618      	mov	r0, r3
 8000268:	46bd      	mov	sp, r7
 800026a:	bc80      	pop	{r7}
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	e000ed00 	.word	0xe000ed00

08000274 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000274:	b480      	push	{r7}
 8000276:	b083      	sub	sp, #12
 8000278:	af00      	add	r7, sp, #0
 800027a:	4603      	mov	r3, r0
 800027c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800027e:	79fb      	ldrb	r3, [r7, #7]
 8000280:	f003 021f 	and.w	r2, r3, #31
 8000284:	4906      	ldr	r1, [pc, #24]	; (80002a0 <NVIC_EnableIRQ+0x2c>)
 8000286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800028a:	095b      	lsrs	r3, r3, #5
 800028c:	2001      	movs	r0, #1
 800028e:	fa00 f202 	lsl.w	r2, r0, r2
 8000292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000296:	bf00      	nop
 8000298:	370c      	adds	r7, #12
 800029a:	46bd      	mov	sp, r7
 800029c:	bc80      	pop	{r7}
 800029e:	4770      	bx	lr
 80002a0:	e000e100 	.word	0xe000e100

080002a4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002a4:	b480      	push	{r7}
 80002a6:	b083      	sub	sp, #12
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	4603      	mov	r3, r0
 80002ac:	6039      	str	r1, [r7, #0]
 80002ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80002b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da0b      	bge.n	80002d0 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002b8:	683b      	ldr	r3, [r7, #0]
 80002ba:	b2da      	uxtb	r2, r3
 80002bc:	490c      	ldr	r1, [pc, #48]	; (80002f0 <NVIC_SetPriority+0x4c>)
 80002be:	79fb      	ldrb	r3, [r7, #7]
 80002c0:	f003 030f 	and.w	r3, r3, #15
 80002c4:	3b04      	subs	r3, #4
 80002c6:	0112      	lsls	r2, r2, #4
 80002c8:	b2d2      	uxtb	r2, r2
 80002ca:	440b      	add	r3, r1
 80002cc:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002ce:	e009      	b.n	80002e4 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d0:	683b      	ldr	r3, [r7, #0]
 80002d2:	b2da      	uxtb	r2, r3
 80002d4:	4907      	ldr	r1, [pc, #28]	; (80002f4 <NVIC_SetPriority+0x50>)
 80002d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002da:	0112      	lsls	r2, r2, #4
 80002dc:	b2d2      	uxtb	r2, r2
 80002de:	440b      	add	r3, r1
 80002e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80002e4:	bf00      	nop
 80002e6:	370c      	adds	r7, #12
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bc80      	pop	{r7}
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop
 80002f0:	e000ed00 	.word	0xe000ed00
 80002f4:	e000e100 	.word	0xe000e100

080002f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80002f8:	b480      	push	{r7}
 80002fa:	b089      	sub	sp, #36	; 0x24
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	60f8      	str	r0, [r7, #12]
 8000300:	60b9      	str	r1, [r7, #8]
 8000302:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	f003 0307 	and.w	r3, r3, #7
 800030a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800030c:	69fb      	ldr	r3, [r7, #28]
 800030e:	f1c3 0307 	rsb	r3, r3, #7
 8000312:	2b04      	cmp	r3, #4
 8000314:	bf28      	it	cs
 8000316:	2304      	movcs	r3, #4
 8000318:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800031a:	69fb      	ldr	r3, [r7, #28]
 800031c:	3304      	adds	r3, #4
 800031e:	2b06      	cmp	r3, #6
 8000320:	d902      	bls.n	8000328 <NVIC_EncodePriority+0x30>
 8000322:	69fb      	ldr	r3, [r7, #28]
 8000324:	3b03      	subs	r3, #3
 8000326:	e000      	b.n	800032a <NVIC_EncodePriority+0x32>
 8000328:	2300      	movs	r3, #0
 800032a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800032c:	f04f 32ff 	mov.w	r2, #4294967295
 8000330:	69bb      	ldr	r3, [r7, #24]
 8000332:	fa02 f303 	lsl.w	r3, r2, r3
 8000336:	43da      	mvns	r2, r3
 8000338:	68bb      	ldr	r3, [r7, #8]
 800033a:	401a      	ands	r2, r3
 800033c:	697b      	ldr	r3, [r7, #20]
 800033e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000340:	f04f 31ff 	mov.w	r1, #4294967295
 8000344:	697b      	ldr	r3, [r7, #20]
 8000346:	fa01 f303 	lsl.w	r3, r1, r3
 800034a:	43d9      	mvns	r1, r3
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000350:	4313      	orrs	r3, r2
         );
}
 8000352:	4618      	mov	r0, r3
 8000354:	3724      	adds	r7, #36	; 0x24
 8000356:	46bd      	mov	sp, r7
 8000358:	bc80      	pop	{r7}
 800035a:	4770      	bx	lr

0800035c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b082      	sub	sp, #8
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	3b01      	subs	r3, #1
 8000368:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800036c:	d301      	bcc.n	8000372 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800036e:	2301      	movs	r3, #1
 8000370:	e00f      	b.n	8000392 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000372:	4a0a      	ldr	r2, [pc, #40]	; (800039c <SysTick_Config+0x40>)
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	3b01      	subs	r3, #1
 8000378:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800037a:	210f      	movs	r1, #15
 800037c:	f04f 30ff 	mov.w	r0, #4294967295
 8000380:	f7ff ff90 	bl	80002a4 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000384:	4b05      	ldr	r3, [pc, #20]	; (800039c <SysTick_Config+0x40>)
 8000386:	2200      	movs	r2, #0
 8000388:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800038a:	4b04      	ldr	r3, [pc, #16]	; (800039c <SysTick_Config+0x40>)
 800038c:	2207      	movs	r2, #7
 800038e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000390:	2300      	movs	r3, #0
}
 8000392:	4618      	mov	r0, r3
 8000394:	3708      	adds	r7, #8
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	e000e010 	.word	0xe000e010

080003a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b082      	sub	sp, #8
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003a8:	6878      	ldr	r0, [r7, #4]
 80003aa:	f7ff ff31 	bl	8000210 <NVIC_SetPriorityGrouping>
}
 80003ae:	bf00      	nop
 80003b0:	3708      	adds	r7, #8
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}

080003b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80003b6:	b580      	push	{r7, lr}
 80003b8:	b086      	sub	sp, #24
 80003ba:	af00      	add	r7, sp, #0
 80003bc:	4603      	mov	r3, r0
 80003be:	60b9      	str	r1, [r7, #8]
 80003c0:	607a      	str	r2, [r7, #4]
 80003c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80003c4:	2300      	movs	r3, #0
 80003c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80003c8:	f7ff ff46 	bl	8000258 <NVIC_GetPriorityGrouping>
 80003cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80003ce:	687a      	ldr	r2, [r7, #4]
 80003d0:	68b9      	ldr	r1, [r7, #8]
 80003d2:	6978      	ldr	r0, [r7, #20]
 80003d4:	f7ff ff90 	bl	80002f8 <NVIC_EncodePriority>
 80003d8:	4602      	mov	r2, r0
 80003da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003de:	4611      	mov	r1, r2
 80003e0:	4618      	mov	r0, r3
 80003e2:	f7ff ff5f 	bl	80002a4 <NVIC_SetPriority>
}
 80003e6:	bf00      	nop
 80003e8:	3718      	adds	r7, #24
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}

080003ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80003ee:	b580      	push	{r7, lr}
 80003f0:	b082      	sub	sp, #8
 80003f2:	af00      	add	r7, sp, #0
 80003f4:	4603      	mov	r3, r0
 80003f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80003f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003fc:	4618      	mov	r0, r3
 80003fe:	f7ff ff39 	bl	8000274 <NVIC_EnableIRQ>
}
 8000402:	bf00      	nop
 8000404:	3708      	adds	r7, #8
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}

0800040a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800040a:	b580      	push	{r7, lr}
 800040c:	b082      	sub	sp, #8
 800040e:	af00      	add	r7, sp, #0
 8000410:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000412:	6878      	ldr	r0, [r7, #4]
 8000414:	f7ff ffa2 	bl	800035c <SysTick_Config>
 8000418:	4603      	mov	r3, r0
}
 800041a:	4618      	mov	r0, r3
 800041c:	3708      	adds	r7, #8
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}
	...

08000424 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000424:	b480      	push	{r7}
 8000426:	b08b      	sub	sp, #44	; 0x2c
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
 800042c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800042e:	2300      	movs	r3, #0
 8000430:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 8000432:	2300      	movs	r3, #0
 8000434:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 8000436:	2300      	movs	r3, #0
 8000438:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 800043a:	2300      	movs	r3, #0
 800043c:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 800043e:	2300      	movs	r3, #0
 8000440:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000442:	2300      	movs	r3, #0
 8000444:	627b      	str	r3, [r7, #36]	; 0x24
 8000446:	e127      	b.n	8000698 <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8000448:	2201      	movs	r2, #1
 800044a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800044c:	fa02 f303 	lsl.w	r3, r2, r3
 8000450:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000452:	683b      	ldr	r3, [r7, #0]
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	69fa      	ldr	r2, [r7, #28]
 8000458:	4013      	ands	r3, r2
 800045a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800045c:	69ba      	ldr	r2, [r7, #24]
 800045e:	69fb      	ldr	r3, [r7, #28]
 8000460:	429a      	cmp	r2, r3
 8000462:	f040 8116 	bne.w	8000692 <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000466:	683b      	ldr	r3, [r7, #0]
 8000468:	685b      	ldr	r3, [r3, #4]
 800046a:	2b12      	cmp	r3, #18
 800046c:	d034      	beq.n	80004d8 <HAL_GPIO_Init+0xb4>
 800046e:	2b12      	cmp	r3, #18
 8000470:	d80d      	bhi.n	800048e <HAL_GPIO_Init+0x6a>
 8000472:	2b02      	cmp	r3, #2
 8000474:	d02b      	beq.n	80004ce <HAL_GPIO_Init+0xaa>
 8000476:	2b02      	cmp	r3, #2
 8000478:	d804      	bhi.n	8000484 <HAL_GPIO_Init+0x60>
 800047a:	2b00      	cmp	r3, #0
 800047c:	d031      	beq.n	80004e2 <HAL_GPIO_Init+0xbe>
 800047e:	2b01      	cmp	r3, #1
 8000480:	d01c      	beq.n	80004bc <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000482:	e048      	b.n	8000516 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000484:	2b03      	cmp	r3, #3
 8000486:	d043      	beq.n	8000510 <HAL_GPIO_Init+0xec>
 8000488:	2b11      	cmp	r3, #17
 800048a:	d01b      	beq.n	80004c4 <HAL_GPIO_Init+0xa0>
          break;
 800048c:	e043      	b.n	8000516 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 800048e:	4a87      	ldr	r2, [pc, #540]	; (80006ac <HAL_GPIO_Init+0x288>)
 8000490:	4293      	cmp	r3, r2
 8000492:	d026      	beq.n	80004e2 <HAL_GPIO_Init+0xbe>
 8000494:	4a85      	ldr	r2, [pc, #532]	; (80006ac <HAL_GPIO_Init+0x288>)
 8000496:	4293      	cmp	r3, r2
 8000498:	d806      	bhi.n	80004a8 <HAL_GPIO_Init+0x84>
 800049a:	4a85      	ldr	r2, [pc, #532]	; (80006b0 <HAL_GPIO_Init+0x28c>)
 800049c:	4293      	cmp	r3, r2
 800049e:	d020      	beq.n	80004e2 <HAL_GPIO_Init+0xbe>
 80004a0:	4a84      	ldr	r2, [pc, #528]	; (80006b4 <HAL_GPIO_Init+0x290>)
 80004a2:	4293      	cmp	r3, r2
 80004a4:	d01d      	beq.n	80004e2 <HAL_GPIO_Init+0xbe>
          break;
 80004a6:	e036      	b.n	8000516 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80004a8:	4a83      	ldr	r2, [pc, #524]	; (80006b8 <HAL_GPIO_Init+0x294>)
 80004aa:	4293      	cmp	r3, r2
 80004ac:	d019      	beq.n	80004e2 <HAL_GPIO_Init+0xbe>
 80004ae:	4a83      	ldr	r2, [pc, #524]	; (80006bc <HAL_GPIO_Init+0x298>)
 80004b0:	4293      	cmp	r3, r2
 80004b2:	d016      	beq.n	80004e2 <HAL_GPIO_Init+0xbe>
 80004b4:	4a82      	ldr	r2, [pc, #520]	; (80006c0 <HAL_GPIO_Init+0x29c>)
 80004b6:	4293      	cmp	r3, r2
 80004b8:	d013      	beq.n	80004e2 <HAL_GPIO_Init+0xbe>
          break;
 80004ba:	e02c      	b.n	8000516 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80004bc:	683b      	ldr	r3, [r7, #0]
 80004be:	68db      	ldr	r3, [r3, #12]
 80004c0:	623b      	str	r3, [r7, #32]
          break;
 80004c2:	e028      	b.n	8000516 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80004c4:	683b      	ldr	r3, [r7, #0]
 80004c6:	68db      	ldr	r3, [r3, #12]
 80004c8:	3304      	adds	r3, #4
 80004ca:	623b      	str	r3, [r7, #32]
          break;
 80004cc:	e023      	b.n	8000516 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80004ce:	683b      	ldr	r3, [r7, #0]
 80004d0:	68db      	ldr	r3, [r3, #12]
 80004d2:	3308      	adds	r3, #8
 80004d4:	623b      	str	r3, [r7, #32]
          break;
 80004d6:	e01e      	b.n	8000516 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	68db      	ldr	r3, [r3, #12]
 80004dc:	330c      	adds	r3, #12
 80004de:	623b      	str	r3, [r7, #32]
          break;
 80004e0:	e019      	b.n	8000516 <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80004e2:	683b      	ldr	r3, [r7, #0]
 80004e4:	689b      	ldr	r3, [r3, #8]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d102      	bne.n	80004f0 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80004ea:	2304      	movs	r3, #4
 80004ec:	623b      	str	r3, [r7, #32]
          break;
 80004ee:	e012      	b.n	8000516 <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80004f0:	683b      	ldr	r3, [r7, #0]
 80004f2:	689b      	ldr	r3, [r3, #8]
 80004f4:	2b01      	cmp	r3, #1
 80004f6:	d105      	bne.n	8000504 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80004f8:	2308      	movs	r3, #8
 80004fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	69fa      	ldr	r2, [r7, #28]
 8000500:	611a      	str	r2, [r3, #16]
          break;
 8000502:	e008      	b.n	8000516 <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000504:	2308      	movs	r3, #8
 8000506:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	69fa      	ldr	r2, [r7, #28]
 800050c:	615a      	str	r2, [r3, #20]
          break;
 800050e:	e002      	b.n	8000516 <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000510:	2300      	movs	r3, #0
 8000512:	623b      	str	r3, [r7, #32]
          break;
 8000514:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000516:	69bb      	ldr	r3, [r7, #24]
 8000518:	2bff      	cmp	r3, #255	; 0xff
 800051a:	d801      	bhi.n	8000520 <HAL_GPIO_Init+0xfc>
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	e001      	b.n	8000524 <HAL_GPIO_Init+0x100>
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	3304      	adds	r3, #4
 8000524:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8000526:	69bb      	ldr	r3, [r7, #24]
 8000528:	2bff      	cmp	r3, #255	; 0xff
 800052a:	d802      	bhi.n	8000532 <HAL_GPIO_Init+0x10e>
 800052c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800052e:	009b      	lsls	r3, r3, #2
 8000530:	e002      	b.n	8000538 <HAL_GPIO_Init+0x114>
 8000532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000534:	3b08      	subs	r3, #8
 8000536:	009b      	lsls	r3, r3, #2
 8000538:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	681a      	ldr	r2, [r3, #0]
 800053e:	210f      	movs	r1, #15
 8000540:	693b      	ldr	r3, [r7, #16]
 8000542:	fa01 f303 	lsl.w	r3, r1, r3
 8000546:	43db      	mvns	r3, r3
 8000548:	401a      	ands	r2, r3
 800054a:	6a39      	ldr	r1, [r7, #32]
 800054c:	693b      	ldr	r3, [r7, #16]
 800054e:	fa01 f303 	lsl.w	r3, r1, r3
 8000552:	431a      	orrs	r2, r3
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	685b      	ldr	r3, [r3, #4]
 800055c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000560:	2b00      	cmp	r3, #0
 8000562:	f000 8096 	beq.w	8000692 <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000566:	4b57      	ldr	r3, [pc, #348]	; (80006c4 <HAL_GPIO_Init+0x2a0>)
 8000568:	699b      	ldr	r3, [r3, #24]
 800056a:	4a56      	ldr	r2, [pc, #344]	; (80006c4 <HAL_GPIO_Init+0x2a0>)
 800056c:	f043 0301 	orr.w	r3, r3, #1
 8000570:	6193      	str	r3, [r2, #24]
 8000572:	4b54      	ldr	r3, [pc, #336]	; (80006c4 <HAL_GPIO_Init+0x2a0>)
 8000574:	699b      	ldr	r3, [r3, #24]
 8000576:	f003 0301 	and.w	r3, r3, #1
 800057a:	60bb      	str	r3, [r7, #8]
 800057c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 800057e:	4a52      	ldr	r2, [pc, #328]	; (80006c8 <HAL_GPIO_Init+0x2a4>)
 8000580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000582:	089b      	lsrs	r3, r3, #2
 8000584:	3302      	adds	r3, #2
 8000586:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800058a:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800058c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800058e:	f003 0303 	and.w	r3, r3, #3
 8000592:	009b      	lsls	r3, r3, #2
 8000594:	220f      	movs	r2, #15
 8000596:	fa02 f303 	lsl.w	r3, r2, r3
 800059a:	43db      	mvns	r3, r3
 800059c:	697a      	ldr	r2, [r7, #20]
 800059e:	4013      	ands	r3, r2
 80005a0:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	4a49      	ldr	r2, [pc, #292]	; (80006cc <HAL_GPIO_Init+0x2a8>)
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d013      	beq.n	80005d2 <HAL_GPIO_Init+0x1ae>
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	4a48      	ldr	r2, [pc, #288]	; (80006d0 <HAL_GPIO_Init+0x2ac>)
 80005ae:	4293      	cmp	r3, r2
 80005b0:	d00d      	beq.n	80005ce <HAL_GPIO_Init+0x1aa>
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	4a47      	ldr	r2, [pc, #284]	; (80006d4 <HAL_GPIO_Init+0x2b0>)
 80005b6:	4293      	cmp	r3, r2
 80005b8:	d007      	beq.n	80005ca <HAL_GPIO_Init+0x1a6>
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	4a46      	ldr	r2, [pc, #280]	; (80006d8 <HAL_GPIO_Init+0x2b4>)
 80005be:	4293      	cmp	r3, r2
 80005c0:	d101      	bne.n	80005c6 <HAL_GPIO_Init+0x1a2>
 80005c2:	2303      	movs	r3, #3
 80005c4:	e006      	b.n	80005d4 <HAL_GPIO_Init+0x1b0>
 80005c6:	2304      	movs	r3, #4
 80005c8:	e004      	b.n	80005d4 <HAL_GPIO_Init+0x1b0>
 80005ca:	2302      	movs	r3, #2
 80005cc:	e002      	b.n	80005d4 <HAL_GPIO_Init+0x1b0>
 80005ce:	2301      	movs	r3, #1
 80005d0:	e000      	b.n	80005d4 <HAL_GPIO_Init+0x1b0>
 80005d2:	2300      	movs	r3, #0
 80005d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005d6:	f002 0203 	and.w	r2, r2, #3
 80005da:	0092      	lsls	r2, r2, #2
 80005dc:	4093      	lsls	r3, r2
 80005de:	697a      	ldr	r2, [r7, #20]
 80005e0:	4313      	orrs	r3, r2
 80005e2:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 80005e4:	4938      	ldr	r1, [pc, #224]	; (80006c8 <HAL_GPIO_Init+0x2a4>)
 80005e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005e8:	089b      	lsrs	r3, r3, #2
 80005ea:	3302      	adds	r3, #2
 80005ec:	697a      	ldr	r2, [r7, #20]
 80005ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	685b      	ldr	r3, [r3, #4]
 80005f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d006      	beq.n	800060c <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80005fe:	4b37      	ldr	r3, [pc, #220]	; (80006dc <HAL_GPIO_Init+0x2b8>)
 8000600:	681a      	ldr	r2, [r3, #0]
 8000602:	4936      	ldr	r1, [pc, #216]	; (80006dc <HAL_GPIO_Init+0x2b8>)
 8000604:	69bb      	ldr	r3, [r7, #24]
 8000606:	4313      	orrs	r3, r2
 8000608:	600b      	str	r3, [r1, #0]
 800060a:	e006      	b.n	800061a <HAL_GPIO_Init+0x1f6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800060c:	4b33      	ldr	r3, [pc, #204]	; (80006dc <HAL_GPIO_Init+0x2b8>)
 800060e:	681a      	ldr	r2, [r3, #0]
 8000610:	69bb      	ldr	r3, [r7, #24]
 8000612:	43db      	mvns	r3, r3
 8000614:	4931      	ldr	r1, [pc, #196]	; (80006dc <HAL_GPIO_Init+0x2b8>)
 8000616:	4013      	ands	r3, r2
 8000618:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800061a:	683b      	ldr	r3, [r7, #0]
 800061c:	685b      	ldr	r3, [r3, #4]
 800061e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000622:	2b00      	cmp	r3, #0
 8000624:	d006      	beq.n	8000634 <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000626:	4b2d      	ldr	r3, [pc, #180]	; (80006dc <HAL_GPIO_Init+0x2b8>)
 8000628:	685a      	ldr	r2, [r3, #4]
 800062a:	492c      	ldr	r1, [pc, #176]	; (80006dc <HAL_GPIO_Init+0x2b8>)
 800062c:	69bb      	ldr	r3, [r7, #24]
 800062e:	4313      	orrs	r3, r2
 8000630:	604b      	str	r3, [r1, #4]
 8000632:	e006      	b.n	8000642 <HAL_GPIO_Init+0x21e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000634:	4b29      	ldr	r3, [pc, #164]	; (80006dc <HAL_GPIO_Init+0x2b8>)
 8000636:	685a      	ldr	r2, [r3, #4]
 8000638:	69bb      	ldr	r3, [r7, #24]
 800063a:	43db      	mvns	r3, r3
 800063c:	4927      	ldr	r1, [pc, #156]	; (80006dc <HAL_GPIO_Init+0x2b8>)
 800063e:	4013      	ands	r3, r2
 8000640:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	685b      	ldr	r3, [r3, #4]
 8000646:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800064a:	2b00      	cmp	r3, #0
 800064c:	d006      	beq.n	800065c <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800064e:	4b23      	ldr	r3, [pc, #140]	; (80006dc <HAL_GPIO_Init+0x2b8>)
 8000650:	689a      	ldr	r2, [r3, #8]
 8000652:	4922      	ldr	r1, [pc, #136]	; (80006dc <HAL_GPIO_Init+0x2b8>)
 8000654:	69bb      	ldr	r3, [r7, #24]
 8000656:	4313      	orrs	r3, r2
 8000658:	608b      	str	r3, [r1, #8]
 800065a:	e006      	b.n	800066a <HAL_GPIO_Init+0x246>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800065c:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <HAL_GPIO_Init+0x2b8>)
 800065e:	689a      	ldr	r2, [r3, #8]
 8000660:	69bb      	ldr	r3, [r7, #24]
 8000662:	43db      	mvns	r3, r3
 8000664:	491d      	ldr	r1, [pc, #116]	; (80006dc <HAL_GPIO_Init+0x2b8>)
 8000666:	4013      	ands	r3, r2
 8000668:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	685b      	ldr	r3, [r3, #4]
 800066e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000672:	2b00      	cmp	r3, #0
 8000674:	d006      	beq.n	8000684 <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000676:	4b19      	ldr	r3, [pc, #100]	; (80006dc <HAL_GPIO_Init+0x2b8>)
 8000678:	68da      	ldr	r2, [r3, #12]
 800067a:	4918      	ldr	r1, [pc, #96]	; (80006dc <HAL_GPIO_Init+0x2b8>)
 800067c:	69bb      	ldr	r3, [r7, #24]
 800067e:	4313      	orrs	r3, r2
 8000680:	60cb      	str	r3, [r1, #12]
 8000682:	e006      	b.n	8000692 <HAL_GPIO_Init+0x26e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000684:	4b15      	ldr	r3, [pc, #84]	; (80006dc <HAL_GPIO_Init+0x2b8>)
 8000686:	68da      	ldr	r2, [r3, #12]
 8000688:	69bb      	ldr	r3, [r7, #24]
 800068a:	43db      	mvns	r3, r3
 800068c:	4913      	ldr	r1, [pc, #76]	; (80006dc <HAL_GPIO_Init+0x2b8>)
 800068e:	4013      	ands	r3, r2
 8000690:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000694:	3301      	adds	r3, #1
 8000696:	627b      	str	r3, [r7, #36]	; 0x24
 8000698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800069a:	2b0f      	cmp	r3, #15
 800069c:	f67f aed4 	bls.w	8000448 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 80006a0:	bf00      	nop
 80006a2:	372c      	adds	r7, #44	; 0x2c
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bc80      	pop	{r7}
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	10210000 	.word	0x10210000
 80006b0:	10110000 	.word	0x10110000
 80006b4:	10120000 	.word	0x10120000
 80006b8:	10310000 	.word	0x10310000
 80006bc:	10320000 	.word	0x10320000
 80006c0:	10220000 	.word	0x10220000
 80006c4:	40021000 	.word	0x40021000
 80006c8:	40010000 	.word	0x40010000
 80006cc:	40010800 	.word	0x40010800
 80006d0:	40010c00 	.word	0x40010c00
 80006d4:	40011000 	.word	0x40011000
 80006d8:	40011400 	.word	0x40011400
 80006dc:	40010400 	.word	0x40010400

080006e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	460b      	mov	r3, r1
 80006ea:	807b      	strh	r3, [r7, #2]
 80006ec:	4613      	mov	r3, r2
 80006ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80006f0:	787b      	ldrb	r3, [r7, #1]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d003      	beq.n	80006fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80006f6:	887a      	ldrh	r2, [r7, #2]
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80006fc:	e003      	b.n	8000706 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80006fe:	887b      	ldrh	r3, [r7, #2]
 8000700:	041a      	lsls	r2, r3, #16
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	611a      	str	r2, [r3, #16]
}
 8000706:	bf00      	nop
 8000708:	370c      	adds	r7, #12
 800070a:	46bd      	mov	sp, r7
 800070c:	bc80      	pop	{r7}
 800070e:	4770      	bx	lr

08000710 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b086      	sub	sp, #24
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8000718:	2300      	movs	r3, #0
 800071a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f003 0301 	and.w	r3, r3, #1
 8000724:	2b00      	cmp	r3, #0
 8000726:	f000 8087 	beq.w	8000838 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800072a:	4b92      	ldr	r3, [pc, #584]	; (8000974 <HAL_RCC_OscConfig+0x264>)
 800072c:	685b      	ldr	r3, [r3, #4]
 800072e:	f003 030c 	and.w	r3, r3, #12
 8000732:	2b04      	cmp	r3, #4
 8000734:	d00c      	beq.n	8000750 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000736:	4b8f      	ldr	r3, [pc, #572]	; (8000974 <HAL_RCC_OscConfig+0x264>)
 8000738:	685b      	ldr	r3, [r3, #4]
 800073a:	f003 030c 	and.w	r3, r3, #12
 800073e:	2b08      	cmp	r3, #8
 8000740:	d112      	bne.n	8000768 <HAL_RCC_OscConfig+0x58>
 8000742:	4b8c      	ldr	r3, [pc, #560]	; (8000974 <HAL_RCC_OscConfig+0x264>)
 8000744:	685b      	ldr	r3, [r3, #4]
 8000746:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800074a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800074e:	d10b      	bne.n	8000768 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000750:	4b88      	ldr	r3, [pc, #544]	; (8000974 <HAL_RCC_OscConfig+0x264>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000758:	2b00      	cmp	r3, #0
 800075a:	d06c      	beq.n	8000836 <HAL_RCC_OscConfig+0x126>
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	685b      	ldr	r3, [r3, #4]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d168      	bne.n	8000836 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8000764:	2301      	movs	r3, #1
 8000766:	e22d      	b.n	8000bc4 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	685b      	ldr	r3, [r3, #4]
 800076c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000770:	d106      	bne.n	8000780 <HAL_RCC_OscConfig+0x70>
 8000772:	4b80      	ldr	r3, [pc, #512]	; (8000974 <HAL_RCC_OscConfig+0x264>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4a7f      	ldr	r2, [pc, #508]	; (8000974 <HAL_RCC_OscConfig+0x264>)
 8000778:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800077c:	6013      	str	r3, [r2, #0]
 800077e:	e02e      	b.n	80007de <HAL_RCC_OscConfig+0xce>
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	685b      	ldr	r3, [r3, #4]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d10c      	bne.n	80007a2 <HAL_RCC_OscConfig+0x92>
 8000788:	4b7a      	ldr	r3, [pc, #488]	; (8000974 <HAL_RCC_OscConfig+0x264>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a79      	ldr	r2, [pc, #484]	; (8000974 <HAL_RCC_OscConfig+0x264>)
 800078e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000792:	6013      	str	r3, [r2, #0]
 8000794:	4b77      	ldr	r3, [pc, #476]	; (8000974 <HAL_RCC_OscConfig+0x264>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a76      	ldr	r2, [pc, #472]	; (8000974 <HAL_RCC_OscConfig+0x264>)
 800079a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800079e:	6013      	str	r3, [r2, #0]
 80007a0:	e01d      	b.n	80007de <HAL_RCC_OscConfig+0xce>
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	685b      	ldr	r3, [r3, #4]
 80007a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80007aa:	d10c      	bne.n	80007c6 <HAL_RCC_OscConfig+0xb6>
 80007ac:	4b71      	ldr	r3, [pc, #452]	; (8000974 <HAL_RCC_OscConfig+0x264>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a70      	ldr	r2, [pc, #448]	; (8000974 <HAL_RCC_OscConfig+0x264>)
 80007b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007b6:	6013      	str	r3, [r2, #0]
 80007b8:	4b6e      	ldr	r3, [pc, #440]	; (8000974 <HAL_RCC_OscConfig+0x264>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a6d      	ldr	r2, [pc, #436]	; (8000974 <HAL_RCC_OscConfig+0x264>)
 80007be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007c2:	6013      	str	r3, [r2, #0]
 80007c4:	e00b      	b.n	80007de <HAL_RCC_OscConfig+0xce>
 80007c6:	4b6b      	ldr	r3, [pc, #428]	; (8000974 <HAL_RCC_OscConfig+0x264>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4a6a      	ldr	r2, [pc, #424]	; (8000974 <HAL_RCC_OscConfig+0x264>)
 80007cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007d0:	6013      	str	r3, [r2, #0]
 80007d2:	4b68      	ldr	r3, [pc, #416]	; (8000974 <HAL_RCC_OscConfig+0x264>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	4a67      	ldr	r2, [pc, #412]	; (8000974 <HAL_RCC_OscConfig+0x264>)
 80007d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007dc:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	685b      	ldr	r3, [r3, #4]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d013      	beq.n	800080e <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80007e6:	f7ff fd09 	bl	80001fc <HAL_GetTick>
 80007ea:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80007ec:	e008      	b.n	8000800 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80007ee:	f7ff fd05 	bl	80001fc <HAL_GetTick>
 80007f2:	4602      	mov	r2, r0
 80007f4:	693b      	ldr	r3, [r7, #16]
 80007f6:	1ad3      	subs	r3, r2, r3
 80007f8:	2b64      	cmp	r3, #100	; 0x64
 80007fa:	d901      	bls.n	8000800 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 80007fc:	2303      	movs	r3, #3
 80007fe:	e1e1      	b.n	8000bc4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000800:	4b5c      	ldr	r3, [pc, #368]	; (8000974 <HAL_RCC_OscConfig+0x264>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000808:	2b00      	cmp	r3, #0
 800080a:	d0f0      	beq.n	80007ee <HAL_RCC_OscConfig+0xde>
 800080c:	e014      	b.n	8000838 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800080e:	f7ff fcf5 	bl	80001fc <HAL_GetTick>
 8000812:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000814:	e008      	b.n	8000828 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000816:	f7ff fcf1 	bl	80001fc <HAL_GetTick>
 800081a:	4602      	mov	r2, r0
 800081c:	693b      	ldr	r3, [r7, #16]
 800081e:	1ad3      	subs	r3, r2, r3
 8000820:	2b64      	cmp	r3, #100	; 0x64
 8000822:	d901      	bls.n	8000828 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8000824:	2303      	movs	r3, #3
 8000826:	e1cd      	b.n	8000bc4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000828:	4b52      	ldr	r3, [pc, #328]	; (8000974 <HAL_RCC_OscConfig+0x264>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000830:	2b00      	cmp	r3, #0
 8000832:	d1f0      	bne.n	8000816 <HAL_RCC_OscConfig+0x106>
 8000834:	e000      	b.n	8000838 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000836:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f003 0302 	and.w	r3, r3, #2
 8000840:	2b00      	cmp	r3, #0
 8000842:	d063      	beq.n	800090c <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000844:	4b4b      	ldr	r3, [pc, #300]	; (8000974 <HAL_RCC_OscConfig+0x264>)
 8000846:	685b      	ldr	r3, [r3, #4]
 8000848:	f003 030c 	and.w	r3, r3, #12
 800084c:	2b00      	cmp	r3, #0
 800084e:	d00b      	beq.n	8000868 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000850:	4b48      	ldr	r3, [pc, #288]	; (8000974 <HAL_RCC_OscConfig+0x264>)
 8000852:	685b      	ldr	r3, [r3, #4]
 8000854:	f003 030c 	and.w	r3, r3, #12
 8000858:	2b08      	cmp	r3, #8
 800085a:	d11c      	bne.n	8000896 <HAL_RCC_OscConfig+0x186>
 800085c:	4b45      	ldr	r3, [pc, #276]	; (8000974 <HAL_RCC_OscConfig+0x264>)
 800085e:	685b      	ldr	r3, [r3, #4]
 8000860:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000864:	2b00      	cmp	r3, #0
 8000866:	d116      	bne.n	8000896 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000868:	4b42      	ldr	r3, [pc, #264]	; (8000974 <HAL_RCC_OscConfig+0x264>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	f003 0302 	and.w	r3, r3, #2
 8000870:	2b00      	cmp	r3, #0
 8000872:	d005      	beq.n	8000880 <HAL_RCC_OscConfig+0x170>
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	691b      	ldr	r3, [r3, #16]
 8000878:	2b01      	cmp	r3, #1
 800087a:	d001      	beq.n	8000880 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 800087c:	2301      	movs	r3, #1
 800087e:	e1a1      	b.n	8000bc4 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000880:	4b3c      	ldr	r3, [pc, #240]	; (8000974 <HAL_RCC_OscConfig+0x264>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	695b      	ldr	r3, [r3, #20]
 800088c:	00db      	lsls	r3, r3, #3
 800088e:	4939      	ldr	r1, [pc, #228]	; (8000974 <HAL_RCC_OscConfig+0x264>)
 8000890:	4313      	orrs	r3, r2
 8000892:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000894:	e03a      	b.n	800090c <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	691b      	ldr	r3, [r3, #16]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d020      	beq.n	80008e0 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800089e:	4b36      	ldr	r3, [pc, #216]	; (8000978 <HAL_RCC_OscConfig+0x268>)
 80008a0:	2201      	movs	r2, #1
 80008a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008a4:	f7ff fcaa 	bl	80001fc <HAL_GetTick>
 80008a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008aa:	e008      	b.n	80008be <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80008ac:	f7ff fca6 	bl	80001fc <HAL_GetTick>
 80008b0:	4602      	mov	r2, r0
 80008b2:	693b      	ldr	r3, [r7, #16]
 80008b4:	1ad3      	subs	r3, r2, r3
 80008b6:	2b02      	cmp	r3, #2
 80008b8:	d901      	bls.n	80008be <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 80008ba:	2303      	movs	r3, #3
 80008bc:	e182      	b.n	8000bc4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008be:	4b2d      	ldr	r3, [pc, #180]	; (8000974 <HAL_RCC_OscConfig+0x264>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	f003 0302 	and.w	r3, r3, #2
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d0f0      	beq.n	80008ac <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008ca:	4b2a      	ldr	r3, [pc, #168]	; (8000974 <HAL_RCC_OscConfig+0x264>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	695b      	ldr	r3, [r3, #20]
 80008d6:	00db      	lsls	r3, r3, #3
 80008d8:	4926      	ldr	r1, [pc, #152]	; (8000974 <HAL_RCC_OscConfig+0x264>)
 80008da:	4313      	orrs	r3, r2
 80008dc:	600b      	str	r3, [r1, #0]
 80008de:	e015      	b.n	800090c <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80008e0:	4b25      	ldr	r3, [pc, #148]	; (8000978 <HAL_RCC_OscConfig+0x268>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008e6:	f7ff fc89 	bl	80001fc <HAL_GetTick>
 80008ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80008ec:	e008      	b.n	8000900 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80008ee:	f7ff fc85 	bl	80001fc <HAL_GetTick>
 80008f2:	4602      	mov	r2, r0
 80008f4:	693b      	ldr	r3, [r7, #16]
 80008f6:	1ad3      	subs	r3, r2, r3
 80008f8:	2b02      	cmp	r3, #2
 80008fa:	d901      	bls.n	8000900 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 80008fc:	2303      	movs	r3, #3
 80008fe:	e161      	b.n	8000bc4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000900:	4b1c      	ldr	r3, [pc, #112]	; (8000974 <HAL_RCC_OscConfig+0x264>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f003 0302 	and.w	r3, r3, #2
 8000908:	2b00      	cmp	r3, #0
 800090a:	d1f0      	bne.n	80008ee <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f003 0308 	and.w	r3, r3, #8
 8000914:	2b00      	cmp	r3, #0
 8000916:	d039      	beq.n	800098c <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	699b      	ldr	r3, [r3, #24]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d019      	beq.n	8000954 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000920:	4b16      	ldr	r3, [pc, #88]	; (800097c <HAL_RCC_OscConfig+0x26c>)
 8000922:	2201      	movs	r2, #1
 8000924:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000926:	f7ff fc69 	bl	80001fc <HAL_GetTick>
 800092a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800092c:	e008      	b.n	8000940 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800092e:	f7ff fc65 	bl	80001fc <HAL_GetTick>
 8000932:	4602      	mov	r2, r0
 8000934:	693b      	ldr	r3, [r7, #16]
 8000936:	1ad3      	subs	r3, r2, r3
 8000938:	2b02      	cmp	r3, #2
 800093a:	d901      	bls.n	8000940 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 800093c:	2303      	movs	r3, #3
 800093e:	e141      	b.n	8000bc4 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000940:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <HAL_RCC_OscConfig+0x264>)
 8000942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000944:	f003 0302 	and.w	r3, r3, #2
 8000948:	2b00      	cmp	r3, #0
 800094a:	d0f0      	beq.n	800092e <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 800094c:	2001      	movs	r0, #1
 800094e:	f000 fabd 	bl	8000ecc <RCC_Delay>
 8000952:	e01b      	b.n	800098c <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000954:	4b09      	ldr	r3, [pc, #36]	; (800097c <HAL_RCC_OscConfig+0x26c>)
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800095a:	f7ff fc4f 	bl	80001fc <HAL_GetTick>
 800095e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000960:	e00e      	b.n	8000980 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000962:	f7ff fc4b 	bl	80001fc <HAL_GetTick>
 8000966:	4602      	mov	r2, r0
 8000968:	693b      	ldr	r3, [r7, #16]
 800096a:	1ad3      	subs	r3, r2, r3
 800096c:	2b02      	cmp	r3, #2
 800096e:	d907      	bls.n	8000980 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8000970:	2303      	movs	r3, #3
 8000972:	e127      	b.n	8000bc4 <HAL_RCC_OscConfig+0x4b4>
 8000974:	40021000 	.word	0x40021000
 8000978:	42420000 	.word	0x42420000
 800097c:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000980:	4b92      	ldr	r3, [pc, #584]	; (8000bcc <HAL_RCC_OscConfig+0x4bc>)
 8000982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000984:	f003 0302 	and.w	r3, r3, #2
 8000988:	2b00      	cmp	r3, #0
 800098a:	d1ea      	bne.n	8000962 <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f003 0304 	and.w	r3, r3, #4
 8000994:	2b00      	cmp	r3, #0
 8000996:	f000 80a6 	beq.w	8000ae6 <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 800099a:	2300      	movs	r3, #0
 800099c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800099e:	4b8b      	ldr	r3, [pc, #556]	; (8000bcc <HAL_RCC_OscConfig+0x4bc>)
 80009a0:	69db      	ldr	r3, [r3, #28]
 80009a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d10d      	bne.n	80009c6 <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80009aa:	4b88      	ldr	r3, [pc, #544]	; (8000bcc <HAL_RCC_OscConfig+0x4bc>)
 80009ac:	69db      	ldr	r3, [r3, #28]
 80009ae:	4a87      	ldr	r2, [pc, #540]	; (8000bcc <HAL_RCC_OscConfig+0x4bc>)
 80009b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b4:	61d3      	str	r3, [r2, #28]
 80009b6:	4b85      	ldr	r3, [pc, #532]	; (8000bcc <HAL_RCC_OscConfig+0x4bc>)
 80009b8:	69db      	ldr	r3, [r3, #28]
 80009ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80009c2:	2301      	movs	r3, #1
 80009c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009c6:	4b82      	ldr	r3, [pc, #520]	; (8000bd0 <HAL_RCC_OscConfig+0x4c0>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d118      	bne.n	8000a04 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80009d2:	4b7f      	ldr	r3, [pc, #508]	; (8000bd0 <HAL_RCC_OscConfig+0x4c0>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4a7e      	ldr	r2, [pc, #504]	; (8000bd0 <HAL_RCC_OscConfig+0x4c0>)
 80009d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80009de:	f7ff fc0d 	bl	80001fc <HAL_GetTick>
 80009e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009e4:	e008      	b.n	80009f8 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80009e6:	f7ff fc09 	bl	80001fc <HAL_GetTick>
 80009ea:	4602      	mov	r2, r0
 80009ec:	693b      	ldr	r3, [r7, #16]
 80009ee:	1ad3      	subs	r3, r2, r3
 80009f0:	2b64      	cmp	r3, #100	; 0x64
 80009f2:	d901      	bls.n	80009f8 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 80009f4:	2303      	movs	r3, #3
 80009f6:	e0e5      	b.n	8000bc4 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009f8:	4b75      	ldr	r3, [pc, #468]	; (8000bd0 <HAL_RCC_OscConfig+0x4c0>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d0f0      	beq.n	80009e6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	68db      	ldr	r3, [r3, #12]
 8000a08:	2b01      	cmp	r3, #1
 8000a0a:	d106      	bne.n	8000a1a <HAL_RCC_OscConfig+0x30a>
 8000a0c:	4b6f      	ldr	r3, [pc, #444]	; (8000bcc <HAL_RCC_OscConfig+0x4bc>)
 8000a0e:	6a1b      	ldr	r3, [r3, #32]
 8000a10:	4a6e      	ldr	r2, [pc, #440]	; (8000bcc <HAL_RCC_OscConfig+0x4bc>)
 8000a12:	f043 0301 	orr.w	r3, r3, #1
 8000a16:	6213      	str	r3, [r2, #32]
 8000a18:	e02d      	b.n	8000a76 <HAL_RCC_OscConfig+0x366>
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	68db      	ldr	r3, [r3, #12]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d10c      	bne.n	8000a3c <HAL_RCC_OscConfig+0x32c>
 8000a22:	4b6a      	ldr	r3, [pc, #424]	; (8000bcc <HAL_RCC_OscConfig+0x4bc>)
 8000a24:	6a1b      	ldr	r3, [r3, #32]
 8000a26:	4a69      	ldr	r2, [pc, #420]	; (8000bcc <HAL_RCC_OscConfig+0x4bc>)
 8000a28:	f023 0301 	bic.w	r3, r3, #1
 8000a2c:	6213      	str	r3, [r2, #32]
 8000a2e:	4b67      	ldr	r3, [pc, #412]	; (8000bcc <HAL_RCC_OscConfig+0x4bc>)
 8000a30:	6a1b      	ldr	r3, [r3, #32]
 8000a32:	4a66      	ldr	r2, [pc, #408]	; (8000bcc <HAL_RCC_OscConfig+0x4bc>)
 8000a34:	f023 0304 	bic.w	r3, r3, #4
 8000a38:	6213      	str	r3, [r2, #32]
 8000a3a:	e01c      	b.n	8000a76 <HAL_RCC_OscConfig+0x366>
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	68db      	ldr	r3, [r3, #12]
 8000a40:	2b05      	cmp	r3, #5
 8000a42:	d10c      	bne.n	8000a5e <HAL_RCC_OscConfig+0x34e>
 8000a44:	4b61      	ldr	r3, [pc, #388]	; (8000bcc <HAL_RCC_OscConfig+0x4bc>)
 8000a46:	6a1b      	ldr	r3, [r3, #32]
 8000a48:	4a60      	ldr	r2, [pc, #384]	; (8000bcc <HAL_RCC_OscConfig+0x4bc>)
 8000a4a:	f043 0304 	orr.w	r3, r3, #4
 8000a4e:	6213      	str	r3, [r2, #32]
 8000a50:	4b5e      	ldr	r3, [pc, #376]	; (8000bcc <HAL_RCC_OscConfig+0x4bc>)
 8000a52:	6a1b      	ldr	r3, [r3, #32]
 8000a54:	4a5d      	ldr	r2, [pc, #372]	; (8000bcc <HAL_RCC_OscConfig+0x4bc>)
 8000a56:	f043 0301 	orr.w	r3, r3, #1
 8000a5a:	6213      	str	r3, [r2, #32]
 8000a5c:	e00b      	b.n	8000a76 <HAL_RCC_OscConfig+0x366>
 8000a5e:	4b5b      	ldr	r3, [pc, #364]	; (8000bcc <HAL_RCC_OscConfig+0x4bc>)
 8000a60:	6a1b      	ldr	r3, [r3, #32]
 8000a62:	4a5a      	ldr	r2, [pc, #360]	; (8000bcc <HAL_RCC_OscConfig+0x4bc>)
 8000a64:	f023 0301 	bic.w	r3, r3, #1
 8000a68:	6213      	str	r3, [r2, #32]
 8000a6a:	4b58      	ldr	r3, [pc, #352]	; (8000bcc <HAL_RCC_OscConfig+0x4bc>)
 8000a6c:	6a1b      	ldr	r3, [r3, #32]
 8000a6e:	4a57      	ldr	r2, [pc, #348]	; (8000bcc <HAL_RCC_OscConfig+0x4bc>)
 8000a70:	f023 0304 	bic.w	r3, r3, #4
 8000a74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	68db      	ldr	r3, [r3, #12]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d015      	beq.n	8000aaa <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a7e:	f7ff fbbd 	bl	80001fc <HAL_GetTick>
 8000a82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a84:	e00a      	b.n	8000a9c <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a86:	f7ff fbb9 	bl	80001fc <HAL_GetTick>
 8000a8a:	4602      	mov	r2, r0
 8000a8c:	693b      	ldr	r3, [r7, #16]
 8000a8e:	1ad3      	subs	r3, r2, r3
 8000a90:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d901      	bls.n	8000a9c <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8000a98:	2303      	movs	r3, #3
 8000a9a:	e093      	b.n	8000bc4 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a9c:	4b4b      	ldr	r3, [pc, #300]	; (8000bcc <HAL_RCC_OscConfig+0x4bc>)
 8000a9e:	6a1b      	ldr	r3, [r3, #32]
 8000aa0:	f003 0302 	and.w	r3, r3, #2
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d0ee      	beq.n	8000a86 <HAL_RCC_OscConfig+0x376>
 8000aa8:	e014      	b.n	8000ad4 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000aaa:	f7ff fba7 	bl	80001fc <HAL_GetTick>
 8000aae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ab0:	e00a      	b.n	8000ac8 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ab2:	f7ff fba3 	bl	80001fc <HAL_GetTick>
 8000ab6:	4602      	mov	r2, r0
 8000ab8:	693b      	ldr	r3, [r7, #16]
 8000aba:	1ad3      	subs	r3, r2, r3
 8000abc:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d901      	bls.n	8000ac8 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8000ac4:	2303      	movs	r3, #3
 8000ac6:	e07d      	b.n	8000bc4 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ac8:	4b40      	ldr	r3, [pc, #256]	; (8000bcc <HAL_RCC_OscConfig+0x4bc>)
 8000aca:	6a1b      	ldr	r3, [r3, #32]
 8000acc:	f003 0302 	and.w	r3, r3, #2
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d1ee      	bne.n	8000ab2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000ad4:	7dfb      	ldrb	r3, [r7, #23]
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	d105      	bne.n	8000ae6 <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ada:	4b3c      	ldr	r3, [pc, #240]	; (8000bcc <HAL_RCC_OscConfig+0x4bc>)
 8000adc:	69db      	ldr	r3, [r3, #28]
 8000ade:	4a3b      	ldr	r2, [pc, #236]	; (8000bcc <HAL_RCC_OscConfig+0x4bc>)
 8000ae0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ae4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	69db      	ldr	r3, [r3, #28]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d069      	beq.n	8000bc2 <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000aee:	4b37      	ldr	r3, [pc, #220]	; (8000bcc <HAL_RCC_OscConfig+0x4bc>)
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	f003 030c 	and.w	r3, r3, #12
 8000af6:	2b08      	cmp	r3, #8
 8000af8:	d061      	beq.n	8000bbe <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	69db      	ldr	r3, [r3, #28]
 8000afe:	2b02      	cmp	r3, #2
 8000b00:	d146      	bne.n	8000b90 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000b02:	4b34      	ldr	r3, [pc, #208]	; (8000bd4 <HAL_RCC_OscConfig+0x4c4>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b08:	f7ff fb78 	bl	80001fc <HAL_GetTick>
 8000b0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b0e:	e008      	b.n	8000b22 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b10:	f7ff fb74 	bl	80001fc <HAL_GetTick>
 8000b14:	4602      	mov	r2, r0
 8000b16:	693b      	ldr	r3, [r7, #16]
 8000b18:	1ad3      	subs	r3, r2, r3
 8000b1a:	2b02      	cmp	r3, #2
 8000b1c:	d901      	bls.n	8000b22 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8000b1e:	2303      	movs	r3, #3
 8000b20:	e050      	b.n	8000bc4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b22:	4b2a      	ldr	r3, [pc, #168]	; (8000bcc <HAL_RCC_OscConfig+0x4bc>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d1f0      	bne.n	8000b10 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6a1b      	ldr	r3, [r3, #32]
 8000b32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b36:	d108      	bne.n	8000b4a <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000b38:	4b24      	ldr	r3, [pc, #144]	; (8000bcc <HAL_RCC_OscConfig+0x4bc>)
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	689b      	ldr	r3, [r3, #8]
 8000b44:	4921      	ldr	r1, [pc, #132]	; (8000bcc <HAL_RCC_OscConfig+0x4bc>)
 8000b46:	4313      	orrs	r3, r2
 8000b48:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000b4a:	4b20      	ldr	r3, [pc, #128]	; (8000bcc <HAL_RCC_OscConfig+0x4bc>)
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	6a19      	ldr	r1, [r3, #32]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b5a:	430b      	orrs	r3, r1
 8000b5c:	491b      	ldr	r1, [pc, #108]	; (8000bcc <HAL_RCC_OscConfig+0x4bc>)
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000b62:	4b1c      	ldr	r3, [pc, #112]	; (8000bd4 <HAL_RCC_OscConfig+0x4c4>)
 8000b64:	2201      	movs	r2, #1
 8000b66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b68:	f7ff fb48 	bl	80001fc <HAL_GetTick>
 8000b6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000b6e:	e008      	b.n	8000b82 <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b70:	f7ff fb44 	bl	80001fc <HAL_GetTick>
 8000b74:	4602      	mov	r2, r0
 8000b76:	693b      	ldr	r3, [r7, #16]
 8000b78:	1ad3      	subs	r3, r2, r3
 8000b7a:	2b02      	cmp	r3, #2
 8000b7c:	d901      	bls.n	8000b82 <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8000b7e:	2303      	movs	r3, #3
 8000b80:	e020      	b.n	8000bc4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000b82:	4b12      	ldr	r3, [pc, #72]	; (8000bcc <HAL_RCC_OscConfig+0x4bc>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d0f0      	beq.n	8000b70 <HAL_RCC_OscConfig+0x460>
 8000b8e:	e018      	b.n	8000bc2 <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000b90:	4b10      	ldr	r3, [pc, #64]	; (8000bd4 <HAL_RCC_OscConfig+0x4c4>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b96:	f7ff fb31 	bl	80001fc <HAL_GetTick>
 8000b9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b9c:	e008      	b.n	8000bb0 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b9e:	f7ff fb2d 	bl	80001fc <HAL_GetTick>
 8000ba2:	4602      	mov	r2, r0
 8000ba4:	693b      	ldr	r3, [r7, #16]
 8000ba6:	1ad3      	subs	r3, r2, r3
 8000ba8:	2b02      	cmp	r3, #2
 8000baa:	d901      	bls.n	8000bb0 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8000bac:	2303      	movs	r3, #3
 8000bae:	e009      	b.n	8000bc4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bb0:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <HAL_RCC_OscConfig+0x4bc>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d1f0      	bne.n	8000b9e <HAL_RCC_OscConfig+0x48e>
 8000bbc:	e001      	b.n	8000bc2 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	e000      	b.n	8000bc4 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8000bc2:	2300      	movs	r3, #0
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3718      	adds	r7, #24
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40021000 	.word	0x40021000
 8000bd0:	40007000 	.word	0x40007000
 8000bd4:	42420060 	.word	0x42420060

08000bd8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000be2:	2300      	movs	r3, #0
 8000be4:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000be6:	4b7e      	ldr	r3, [pc, #504]	; (8000de0 <HAL_RCC_ClockConfig+0x208>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f003 0307 	and.w	r3, r3, #7
 8000bee:	683a      	ldr	r2, [r7, #0]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	d910      	bls.n	8000c16 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000bf4:	4b7a      	ldr	r3, [pc, #488]	; (8000de0 <HAL_RCC_ClockConfig+0x208>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f023 0207 	bic.w	r2, r3, #7
 8000bfc:	4978      	ldr	r1, [pc, #480]	; (8000de0 <HAL_RCC_ClockConfig+0x208>)
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	4313      	orrs	r3, r2
 8000c02:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000c04:	4b76      	ldr	r3, [pc, #472]	; (8000de0 <HAL_RCC_ClockConfig+0x208>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f003 0307 	and.w	r3, r3, #7
 8000c0c:	683a      	ldr	r2, [r7, #0]
 8000c0e:	429a      	cmp	r2, r3
 8000c10:	d001      	beq.n	8000c16 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8000c12:	2301      	movs	r3, #1
 8000c14:	e0e0      	b.n	8000dd8 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f003 0302 	and.w	r3, r3, #2
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d020      	beq.n	8000c64 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f003 0304 	and.w	r3, r3, #4
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d005      	beq.n	8000c3a <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000c2e:	4b6d      	ldr	r3, [pc, #436]	; (8000de4 <HAL_RCC_ClockConfig+0x20c>)
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	4a6c      	ldr	r2, [pc, #432]	; (8000de4 <HAL_RCC_ClockConfig+0x20c>)
 8000c34:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000c38:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f003 0308 	and.w	r3, r3, #8
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d005      	beq.n	8000c52 <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000c46:	4b67      	ldr	r3, [pc, #412]	; (8000de4 <HAL_RCC_ClockConfig+0x20c>)
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	4a66      	ldr	r2, [pc, #408]	; (8000de4 <HAL_RCC_ClockConfig+0x20c>)
 8000c4c:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000c50:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c52:	4b64      	ldr	r3, [pc, #400]	; (8000de4 <HAL_RCC_ClockConfig+0x20c>)
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	689b      	ldr	r3, [r3, #8]
 8000c5e:	4961      	ldr	r1, [pc, #388]	; (8000de4 <HAL_RCC_ClockConfig+0x20c>)
 8000c60:	4313      	orrs	r3, r2
 8000c62:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f003 0301 	and.w	r3, r3, #1
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d06a      	beq.n	8000d46 <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d107      	bne.n	8000c88 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c78:	4b5a      	ldr	r3, [pc, #360]	; (8000de4 <HAL_RCC_ClockConfig+0x20c>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d115      	bne.n	8000cb0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8000c84:	2301      	movs	r3, #1
 8000c86:	e0a7      	b.n	8000dd8 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	2b02      	cmp	r3, #2
 8000c8e:	d107      	bne.n	8000ca0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c90:	4b54      	ldr	r3, [pc, #336]	; (8000de4 <HAL_RCC_ClockConfig+0x20c>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d109      	bne.n	8000cb0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	e09b      	b.n	8000dd8 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ca0:	4b50      	ldr	r3, [pc, #320]	; (8000de4 <HAL_RCC_ClockConfig+0x20c>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f003 0302 	and.w	r3, r3, #2
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d101      	bne.n	8000cb0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8000cac:	2301      	movs	r3, #1
 8000cae:	e093      	b.n	8000dd8 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000cb0:	4b4c      	ldr	r3, [pc, #304]	; (8000de4 <HAL_RCC_ClockConfig+0x20c>)
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	f023 0203 	bic.w	r2, r3, #3
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	4949      	ldr	r1, [pc, #292]	; (8000de4 <HAL_RCC_ClockConfig+0x20c>)
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000cc2:	f7ff fa9b 	bl	80001fc <HAL_GetTick>
 8000cc6:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d112      	bne.n	8000cf6 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000cd0:	e00a      	b.n	8000ce8 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cd2:	f7ff fa93 	bl	80001fc <HAL_GetTick>
 8000cd6:	4602      	mov	r2, r0
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	1ad3      	subs	r3, r2, r3
 8000cdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d901      	bls.n	8000ce8 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8000ce4:	2303      	movs	r3, #3
 8000ce6:	e077      	b.n	8000dd8 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ce8:	4b3e      	ldr	r3, [pc, #248]	; (8000de4 <HAL_RCC_ClockConfig+0x20c>)
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	f003 030c 	and.w	r3, r3, #12
 8000cf0:	2b04      	cmp	r3, #4
 8000cf2:	d1ee      	bne.n	8000cd2 <HAL_RCC_ClockConfig+0xfa>
 8000cf4:	e027      	b.n	8000d46 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	2b02      	cmp	r3, #2
 8000cfc:	d11d      	bne.n	8000d3a <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000cfe:	e00a      	b.n	8000d16 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d00:	f7ff fa7c 	bl	80001fc <HAL_GetTick>
 8000d04:	4602      	mov	r2, r0
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	1ad3      	subs	r3, r2, r3
 8000d0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d901      	bls.n	8000d16 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8000d12:	2303      	movs	r3, #3
 8000d14:	e060      	b.n	8000dd8 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d16:	4b33      	ldr	r3, [pc, #204]	; (8000de4 <HAL_RCC_ClockConfig+0x20c>)
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	f003 030c 	and.w	r3, r3, #12
 8000d1e:	2b08      	cmp	r3, #8
 8000d20:	d1ee      	bne.n	8000d00 <HAL_RCC_ClockConfig+0x128>
 8000d22:	e010      	b.n	8000d46 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d24:	f7ff fa6a 	bl	80001fc <HAL_GetTick>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d901      	bls.n	8000d3a <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8000d36:	2303      	movs	r3, #3
 8000d38:	e04e      	b.n	8000dd8 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d3a:	4b2a      	ldr	r3, [pc, #168]	; (8000de4 <HAL_RCC_ClockConfig+0x20c>)
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	f003 030c 	and.w	r3, r3, #12
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d1ee      	bne.n	8000d24 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d46:	4b26      	ldr	r3, [pc, #152]	; (8000de0 <HAL_RCC_ClockConfig+0x208>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f003 0307 	and.w	r3, r3, #7
 8000d4e:	683a      	ldr	r2, [r7, #0]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d210      	bcs.n	8000d76 <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d54:	4b22      	ldr	r3, [pc, #136]	; (8000de0 <HAL_RCC_ClockConfig+0x208>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f023 0207 	bic.w	r2, r3, #7
 8000d5c:	4920      	ldr	r1, [pc, #128]	; (8000de0 <HAL_RCC_ClockConfig+0x208>)
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000d64:	4b1e      	ldr	r3, [pc, #120]	; (8000de0 <HAL_RCC_ClockConfig+0x208>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f003 0307 	and.w	r3, r3, #7
 8000d6c:	683a      	ldr	r2, [r7, #0]
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d001      	beq.n	8000d76 <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
 8000d74:	e030      	b.n	8000dd8 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f003 0304 	and.w	r3, r3, #4
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d008      	beq.n	8000d94 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d82:	4b18      	ldr	r3, [pc, #96]	; (8000de4 <HAL_RCC_ClockConfig+0x20c>)
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	68db      	ldr	r3, [r3, #12]
 8000d8e:	4915      	ldr	r1, [pc, #84]	; (8000de4 <HAL_RCC_ClockConfig+0x20c>)
 8000d90:	4313      	orrs	r3, r2
 8000d92:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f003 0308 	and.w	r3, r3, #8
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d009      	beq.n	8000db4 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000da0:	4b10      	ldr	r3, [pc, #64]	; (8000de4 <HAL_RCC_ClockConfig+0x20c>)
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	691b      	ldr	r3, [r3, #16]
 8000dac:	00db      	lsls	r3, r3, #3
 8000dae:	490d      	ldr	r1, [pc, #52]	; (8000de4 <HAL_RCC_ClockConfig+0x20c>)
 8000db0:	4313      	orrs	r3, r2
 8000db2:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000db4:	f000 f828 	bl	8000e08 <HAL_RCC_GetSysClockFreq>
 8000db8:	4601      	mov	r1, r0
 8000dba:	4b0a      	ldr	r3, [pc, #40]	; (8000de4 <HAL_RCC_ClockConfig+0x20c>)
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	091b      	lsrs	r3, r3, #4
 8000dc0:	f003 030f 	and.w	r3, r3, #15
 8000dc4:	4a08      	ldr	r2, [pc, #32]	; (8000de8 <HAL_RCC_ClockConfig+0x210>)
 8000dc6:	5cd3      	ldrb	r3, [r2, r3]
 8000dc8:	fa21 f303 	lsr.w	r3, r1, r3
 8000dcc:	4a07      	ldr	r2, [pc, #28]	; (8000dec <HAL_RCC_ClockConfig+0x214>)
 8000dce:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000dd0:	2000      	movs	r0, #0
 8000dd2:	f7ff f9d1 	bl	8000178 <HAL_InitTick>
  
  return HAL_OK;
 8000dd6:	2300      	movs	r3, #0
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3710      	adds	r7, #16
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40022000 	.word	0x40022000
 8000de4:	40021000 	.word	0x40021000
 8000de8:	080024d8 	.word	0x080024d8
 8000dec:	20000008 	.word	0x20000008

08000df0 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to 
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.  
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8000df4:	4b03      	ldr	r3, [pc, #12]	; (8000e04 <HAL_RCC_EnableCSS+0x14>)
 8000df6:	2201      	movs	r2, #1
 8000df8:	601a      	str	r2, [r3, #0]
}
 8000dfa:	bf00      	nop
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bc80      	pop	{r7}
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	4242004c 	.word	0x4242004c

08000e08 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000e08:	b490      	push	{r4, r7}
 8000e0a:	b08a      	sub	sp, #40	; 0x28
 8000e0c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000e0e:	4b2a      	ldr	r3, [pc, #168]	; (8000eb8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8000e10:	1d3c      	adds	r4, r7, #4
 8000e12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e14:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000e18:	4b28      	ldr	r3, [pc, #160]	; (8000ebc <HAL_RCC_GetSysClockFreq+0xb4>)
 8000e1a:	881b      	ldrh	r3, [r3, #0]
 8000e1c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61fb      	str	r3, [r7, #28]
 8000e22:	2300      	movs	r3, #0
 8000e24:	61bb      	str	r3, [r7, #24]
 8000e26:	2300      	movs	r3, #0
 8000e28:	627b      	str	r3, [r7, #36]	; 0x24
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000e32:	4b23      	ldr	r3, [pc, #140]	; (8000ec0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	f003 030c 	and.w	r3, r3, #12
 8000e3e:	2b04      	cmp	r3, #4
 8000e40:	d002      	beq.n	8000e48 <HAL_RCC_GetSysClockFreq+0x40>
 8000e42:	2b08      	cmp	r3, #8
 8000e44:	d003      	beq.n	8000e4e <HAL_RCC_GetSysClockFreq+0x46>
 8000e46:	e02d      	b.n	8000ea4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000e48:	4b1e      	ldr	r3, [pc, #120]	; (8000ec4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000e4a:	623b      	str	r3, [r7, #32]
      break;
 8000e4c:	e02d      	b.n	8000eaa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	0c9b      	lsrs	r3, r3, #18
 8000e52:	f003 030f 	and.w	r3, r3, #15
 8000e56:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000e5a:	4413      	add	r3, r2
 8000e5c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000e60:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d013      	beq.n	8000e94 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000e6c:	4b14      	ldr	r3, [pc, #80]	; (8000ec0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	0c5b      	lsrs	r3, r3, #17
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000e7a:	4413      	add	r3, r2
 8000e7c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000e80:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	4a0f      	ldr	r2, [pc, #60]	; (8000ec4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000e86:	fb02 f203 	mul.w	r2, r2, r3
 8000e8a:	69bb      	ldr	r3, [r7, #24]
 8000e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e90:	627b      	str	r3, [r7, #36]	; 0x24
 8000e92:	e004      	b.n	8000e9e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	4a0c      	ldr	r2, [pc, #48]	; (8000ec8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000e98:	fb02 f303 	mul.w	r3, r2, r3
 8000e9c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8000e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea0:	623b      	str	r3, [r7, #32]
      break;
 8000ea2:	e002      	b.n	8000eaa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000ea4:	4b07      	ldr	r3, [pc, #28]	; (8000ec4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000ea6:	623b      	str	r3, [r7, #32]
      break;
 8000ea8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000eaa:	6a3b      	ldr	r3, [r7, #32]
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3728      	adds	r7, #40	; 0x28
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bc90      	pop	{r4, r7}
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	080024c4 	.word	0x080024c4
 8000ebc:	080024d4 	.word	0x080024d4
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	007a1200 	.word	0x007a1200
 8000ec8:	003d0900 	.word	0x003d0900

08000ecc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b085      	sub	sp, #20
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000ed4:	4b0a      	ldr	r3, [pc, #40]	; (8000f00 <RCC_Delay+0x34>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a0a      	ldr	r2, [pc, #40]	; (8000f04 <RCC_Delay+0x38>)
 8000eda:	fba2 2303 	umull	r2, r3, r2, r3
 8000ede:	0a5b      	lsrs	r3, r3, #9
 8000ee0:	687a      	ldr	r2, [r7, #4]
 8000ee2:	fb02 f303 	mul.w	r3, r2, r3
 8000ee6:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000ee8:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	1e5a      	subs	r2, r3, #1
 8000eee:	60fa      	str	r2, [r7, #12]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d1f9      	bne.n	8000ee8 <RCC_Delay+0x1c>
}
 8000ef4:	bf00      	nop
 8000ef6:	3714      	adds	r7, #20
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bc80      	pop	{r7}
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	20000008 	.word	0x20000008
 8000f04:	10624dd3 	.word	0x10624dd3

08000f08 <HAL_TIM_Base_Init>:
  *       Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d101      	bne.n	8000f1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e01d      	b.n	8000f56 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d106      	bne.n	8000f34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f000 fd16 	bl	8001960 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2202      	movs	r2, #2
 8000f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	3304      	adds	r3, #4
 8000f44:	4619      	mov	r1, r3
 8000f46:	4610      	mov	r0, r2
 8000f48:	f000 fa5e 	bl	8001408 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2201      	movs	r2, #1
 8000f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8000f54:	2300      	movs	r3, #0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	b083      	sub	sp, #12
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	68da      	ldr	r2, [r3, #12]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f042 0201 	orr.w	r2, r2, #1
 8000f74:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f042 0201 	orr.w	r2, r2, #1
 8000f84:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8000f86:	2300      	movs	r3, #0
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bc80      	pop	{r7}
 8000f90:	4770      	bx	lr

08000f92 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8000f92:	b480      	push	{r7}
 8000f94:	b083      	sub	sp, #12
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	68da      	ldr	r2, [r3, #12]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f022 0201 	bic.w	r2, r2, #1
 8000fa8:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	6a1a      	ldr	r2, [r3, #32]
 8000fb0:	f241 1311 	movw	r3, #4369	; 0x1111
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d10f      	bne.n	8000fda <HAL_TIM_Base_Stop_IT+0x48>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	6a1a      	ldr	r2, [r3, #32]
 8000fc0:	f240 4344 	movw	r3, #1092	; 0x444
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d107      	bne.n	8000fda <HAL_TIM_Base_Stop_IT+0x48>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f022 0201 	bic.w	r2, r2, #1
 8000fd8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8000fda:	2300      	movs	r3, #0
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bc80      	pop	{r7}
 8000fe4:	4770      	bx	lr

08000fe6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b082      	sub	sp, #8
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	691b      	ldr	r3, [r3, #16]
 8000ff4:	f003 0302 	and.w	r3, r3, #2
 8000ff8:	2b02      	cmp	r3, #2
 8000ffa:	d122      	bne.n	8001042 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	68db      	ldr	r3, [r3, #12]
 8001002:	f003 0302 	and.w	r3, r3, #2
 8001006:	2b02      	cmp	r3, #2
 8001008:	d11b      	bne.n	8001042 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f06f 0202 	mvn.w	r2, #2
 8001012:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2201      	movs	r2, #1
 8001018:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	699b      	ldr	r3, [r3, #24]
 8001020:	f003 0303 	and.w	r3, r3, #3
 8001024:	2b00      	cmp	r3, #0
 8001026:	d003      	beq.n	8001030 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f000 f9d1 	bl	80013d0 <HAL_TIM_IC_CaptureCallback>
 800102e:	e005      	b.n	800103c <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f000 f9c4 	bl	80013be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f000 f9d3 	bl	80013e2 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2200      	movs	r2, #0
 8001040:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	691b      	ldr	r3, [r3, #16]
 8001048:	f003 0304 	and.w	r3, r3, #4
 800104c:	2b04      	cmp	r3, #4
 800104e:	d122      	bne.n	8001096 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	68db      	ldr	r3, [r3, #12]
 8001056:	f003 0304 	and.w	r3, r3, #4
 800105a:	2b04      	cmp	r3, #4
 800105c:	d11b      	bne.n	8001096 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f06f 0204 	mvn.w	r2, #4
 8001066:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2202      	movs	r2, #2
 800106c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001078:	2b00      	cmp	r3, #0
 800107a:	d003      	beq.n	8001084 <HAL_TIM_IRQHandler+0x9e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f000 f9a7 	bl	80013d0 <HAL_TIM_IC_CaptureCallback>
 8001082:	e005      	b.n	8001090 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f000 f99a 	bl	80013be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f000 f9a9 	bl	80013e2 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2200      	movs	r2, #0
 8001094:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	691b      	ldr	r3, [r3, #16]
 800109c:	f003 0308 	and.w	r3, r3, #8
 80010a0:	2b08      	cmp	r3, #8
 80010a2:	d122      	bne.n	80010ea <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	68db      	ldr	r3, [r3, #12]
 80010aa:	f003 0308 	and.w	r3, r3, #8
 80010ae:	2b08      	cmp	r3, #8
 80010b0:	d11b      	bne.n	80010ea <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f06f 0208 	mvn.w	r2, #8
 80010ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2204      	movs	r2, #4
 80010c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	69db      	ldr	r3, [r3, #28]
 80010c8:	f003 0303 	and.w	r3, r3, #3
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d003      	beq.n	80010d8 <HAL_TIM_IRQHandler+0xf2>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f000 f97d 	bl	80013d0 <HAL_TIM_IC_CaptureCallback>
 80010d6:	e005      	b.n	80010e4 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f000 f970 	bl	80013be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f000 f97f 	bl	80013e2 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2200      	movs	r2, #0
 80010e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	691b      	ldr	r3, [r3, #16]
 80010f0:	f003 0310 	and.w	r3, r3, #16
 80010f4:	2b10      	cmp	r3, #16
 80010f6:	d122      	bne.n	800113e <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	68db      	ldr	r3, [r3, #12]
 80010fe:	f003 0310 	and.w	r3, r3, #16
 8001102:	2b10      	cmp	r3, #16
 8001104:	d11b      	bne.n	800113e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f06f 0210 	mvn.w	r2, #16
 800110e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2208      	movs	r2, #8
 8001114:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	69db      	ldr	r3, [r3, #28]
 800111c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001120:	2b00      	cmp	r3, #0
 8001122:	d003      	beq.n	800112c <HAL_TIM_IRQHandler+0x146>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f000 f953 	bl	80013d0 <HAL_TIM_IC_CaptureCallback>
 800112a:	e005      	b.n	8001138 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f000 f946 	bl	80013be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f000 f955 	bl	80013e2 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2200      	movs	r2, #0
 800113c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	691b      	ldr	r3, [r3, #16]
 8001144:	f003 0301 	and.w	r3, r3, #1
 8001148:	2b01      	cmp	r3, #1
 800114a:	d10e      	bne.n	800116a <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	68db      	ldr	r3, [r3, #12]
 8001152:	f003 0301 	and.w	r3, r3, #1
 8001156:	2b01      	cmp	r3, #1
 8001158:	d107      	bne.n	800116a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f06f 0201 	mvn.w	r2, #1
 8001162:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f000 f921 	bl	80013ac <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	691b      	ldr	r3, [r3, #16]
 8001170:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001174:	2b80      	cmp	r3, #128	; 0x80
 8001176:	d10e      	bne.n	8001196 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	68db      	ldr	r3, [r3, #12]
 800117e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001182:	2b80      	cmp	r3, #128	; 0x80
 8001184:	d107      	bne.n	8001196 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800118e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f000 fa91 	bl	80016b8 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	691b      	ldr	r3, [r3, #16]
 800119c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011a0:	2b40      	cmp	r3, #64	; 0x40
 80011a2:	d10e      	bne.n	80011c2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	68db      	ldr	r3, [r3, #12]
 80011aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011ae:	2b40      	cmp	r3, #64	; 0x40
 80011b0:	d107      	bne.n	80011c2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80011ba:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f000 f919 	bl	80013f4 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	691b      	ldr	r3, [r3, #16]
 80011c8:	f003 0320 	and.w	r3, r3, #32
 80011cc:	2b20      	cmp	r3, #32
 80011ce:	d10e      	bne.n	80011ee <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	68db      	ldr	r3, [r3, #12]
 80011d6:	f003 0320 	and.w	r3, r3, #32
 80011da:	2b20      	cmp	r3, #32
 80011dc:	d107      	bne.n	80011ee <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f06f 0220 	mvn.w	r2, #32
 80011e6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f000 fa5c 	bl	80016a6 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 80011ee:	bf00      	nop
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig : pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b084      	sub	sp, #16
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
 80011fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8001200:	2300      	movs	r3, #0
 8001202:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800120a:	2b01      	cmp	r3, #1
 800120c:	d101      	bne.n	8001212 <HAL_TIM_ConfigClockSource+0x1c>
 800120e:	2302      	movs	r3, #2
 8001210:	e0c8      	b.n	80013a4 <HAL_TIM_ConfigClockSource+0x1ae>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2201      	movs	r2, #1
 8001216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2202      	movs	r2, #2
 800121e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001230:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001238:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	68fa      	ldr	r2, [r7, #12]
 8001240:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2b40      	cmp	r3, #64	; 0x40
 8001248:	d077      	beq.n	800133a <HAL_TIM_ConfigClockSource+0x144>
 800124a:	2b40      	cmp	r3, #64	; 0x40
 800124c:	d80e      	bhi.n	800126c <HAL_TIM_ConfigClockSource+0x76>
 800124e:	2b10      	cmp	r3, #16
 8001250:	f000 808a 	beq.w	8001368 <HAL_TIM_ConfigClockSource+0x172>
 8001254:	2b10      	cmp	r3, #16
 8001256:	d802      	bhi.n	800125e <HAL_TIM_ConfigClockSource+0x68>
 8001258:	2b00      	cmp	r3, #0
 800125a:	d07e      	beq.n	800135a <HAL_TIM_ConfigClockSource+0x164>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 800125c:	e099      	b.n	8001392 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 800125e:	2b20      	cmp	r3, #32
 8001260:	f000 8089 	beq.w	8001376 <HAL_TIM_ConfigClockSource+0x180>
 8001264:	2b30      	cmp	r3, #48	; 0x30
 8001266:	f000 808d 	beq.w	8001384 <HAL_TIM_ConfigClockSource+0x18e>
    break;
 800126a:	e092      	b.n	8001392 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 800126c:	2b70      	cmp	r3, #112	; 0x70
 800126e:	d016      	beq.n	800129e <HAL_TIM_ConfigClockSource+0xa8>
 8001270:	2b70      	cmp	r3, #112	; 0x70
 8001272:	d804      	bhi.n	800127e <HAL_TIM_ConfigClockSource+0x88>
 8001274:	2b50      	cmp	r3, #80	; 0x50
 8001276:	d040      	beq.n	80012fa <HAL_TIM_ConfigClockSource+0x104>
 8001278:	2b60      	cmp	r3, #96	; 0x60
 800127a:	d04e      	beq.n	800131a <HAL_TIM_ConfigClockSource+0x124>
    break;
 800127c:	e089      	b.n	8001392 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 800127e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001282:	d003      	beq.n	800128c <HAL_TIM_ConfigClockSource+0x96>
 8001284:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001288:	d024      	beq.n	80012d4 <HAL_TIM_ConfigClockSource+0xde>
    break;
 800128a:	e082      	b.n	8001392 <HAL_TIM_ConfigClockSource+0x19c>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	689a      	ldr	r2, [r3, #8]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f022 0207 	bic.w	r2, r2, #7
 800129a:	609a      	str	r2, [r3, #8]
    break;
 800129c:	e079      	b.n	8001392 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance,
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6818      	ldr	r0, [r3, #0]
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	6899      	ldr	r1, [r3, #8]
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685a      	ldr	r2, [r3, #4]
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	68db      	ldr	r3, [r3, #12]
 80012ae:	f000 f995 	bl	80015dc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80012c0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80012c8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	68fa      	ldr	r2, [r7, #12]
 80012d0:	609a      	str	r2, [r3, #8]
    break;
 80012d2:	e05e      	b.n	8001392 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance,
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6818      	ldr	r0, [r3, #0]
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	6899      	ldr	r1, [r3, #8]
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685a      	ldr	r2, [r3, #4]
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	f000 f97a 	bl	80015dc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	689a      	ldr	r2, [r3, #8]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80012f6:	609a      	str	r2, [r3, #8]
    break;
 80012f8:	e04b      	b.n	8001392 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6818      	ldr	r0, [r3, #0]
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	6859      	ldr	r1, [r3, #4]
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	68db      	ldr	r3, [r3, #12]
 8001306:	461a      	mov	r2, r3
 8001308:	f000 f8e4 	bl	80014d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2150      	movs	r1, #80	; 0x50
 8001312:	4618      	mov	r0, r3
 8001314:	f000 f943 	bl	800159e <TIM_ITRx_SetConfig>
    break;
 8001318:	e03b      	b.n	8001392 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6818      	ldr	r0, [r3, #0]
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	6859      	ldr	r1, [r3, #4]
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	461a      	mov	r2, r3
 8001328:	f000 f906 	bl	8001538 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2160      	movs	r1, #96	; 0x60
 8001332:	4618      	mov	r0, r3
 8001334:	f000 f933 	bl	800159e <TIM_ITRx_SetConfig>
    break;
 8001338:	e02b      	b.n	8001392 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6818      	ldr	r0, [r3, #0]
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	6859      	ldr	r1, [r3, #4]
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	68db      	ldr	r3, [r3, #12]
 8001346:	461a      	mov	r2, r3
 8001348:	f000 f8c4 	bl	80014d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2140      	movs	r1, #64	; 0x40
 8001352:	4618      	mov	r0, r3
 8001354:	f000 f923 	bl	800159e <TIM_ITRx_SetConfig>
    break;
 8001358:	e01b      	b.n	8001392 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2100      	movs	r1, #0
 8001360:	4618      	mov	r0, r3
 8001362:	f000 f91c 	bl	800159e <TIM_ITRx_SetConfig>
    break;
 8001366:	e014      	b.n	8001392 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2110      	movs	r1, #16
 800136e:	4618      	mov	r0, r3
 8001370:	f000 f915 	bl	800159e <TIM_ITRx_SetConfig>
    break;
 8001374:	e00d      	b.n	8001392 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	2120      	movs	r1, #32
 800137c:	4618      	mov	r0, r3
 800137e:	f000 f90e 	bl	800159e <TIM_ITRx_SetConfig>
    break;
 8001382:	e006      	b.n	8001392 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2130      	movs	r1, #48	; 0x30
 800138a:	4618      	mov	r0, r3
 800138c:	f000 f907 	bl	800159e <TIM_ITRx_SetConfig>
    break;
 8001390:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2201      	movs	r2, #1
 8001396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2200      	movs	r2, #0
 800139e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80013a2:	2300      	movs	r3, #0
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3710      	adds	r7, #16
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */

}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bc80      	pop	{r7}
 80013bc:	4770      	bx	lr

080013be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim : TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013be:	b480      	push	{r7}
 80013c0:	b083      	sub	sp, #12
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80013c6:	bf00      	nop
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bc80      	pop	{r7}
 80013ce:	4770      	bx	lr

080013d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim : TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80013d8:	bf00      	nop
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	bc80      	pop	{r7}
 80013e0:	4770      	bx	lr

080013e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80013e2:	b480      	push	{r7}
 80013e4:	b083      	sub	sp, #12
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80013ea:	bf00      	nop
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bc80      	pop	{r7}
 80013f2:	4770      	bx	lr

080013f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80013fc:	bf00      	nop
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	bc80      	pop	{r7}
 8001404:	4770      	bx	lr
	...

08001408 <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8001412:	2300      	movs	r3, #0
 8001414:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	4a2a      	ldr	r2, [pc, #168]	; (80014c8 <TIM_Base_SetConfig+0xc0>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d00b      	beq.n	800143c <TIM_Base_SetConfig+0x34>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800142a:	d007      	beq.n	800143c <TIM_Base_SetConfig+0x34>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	4a27      	ldr	r2, [pc, #156]	; (80014cc <TIM_Base_SetConfig+0xc4>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d003      	beq.n	800143c <TIM_Base_SetConfig+0x34>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	4a26      	ldr	r2, [pc, #152]	; (80014d0 <TIM_Base_SetConfig+0xc8>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d108      	bne.n	800144e <TIM_Base_SetConfig+0x46>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001442:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	68fa      	ldr	r2, [r7, #12]
 800144a:	4313      	orrs	r3, r2
 800144c:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a1d      	ldr	r2, [pc, #116]	; (80014c8 <TIM_Base_SetConfig+0xc0>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d00b      	beq.n	800146e <TIM_Base_SetConfig+0x66>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800145c:	d007      	beq.n	800146e <TIM_Base_SetConfig+0x66>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a1a      	ldr	r2, [pc, #104]	; (80014cc <TIM_Base_SetConfig+0xc4>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d003      	beq.n	800146e <TIM_Base_SetConfig+0x66>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a19      	ldr	r2, [pc, #100]	; (80014d0 <TIM_Base_SetConfig+0xc8>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d108      	bne.n	8001480 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001474:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	68db      	ldr	r3, [r3, #12]
 800147a:	68fa      	ldr	r2, [r7, #12]
 800147c:	4313      	orrs	r3, r2
 800147e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001486:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	695b      	ldr	r3, [r3, #20]
 800148c:	68fa      	ldr	r2, [r7, #12]
 800148e:	4313      	orrs	r3, r2
 8001490:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	68fa      	ldr	r2, [r7, #12]
 8001496:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	689a      	ldr	r2, [r3, #8]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	4a07      	ldr	r2, [pc, #28]	; (80014c8 <TIM_Base_SetConfig+0xc0>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d103      	bne.n	80014b8 <TIM_Base_SetConfig+0xb0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	691a      	ldr	r2, [r3, #16]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2201      	movs	r2, #1
 80014bc:	615a      	str	r2, [r3, #20]
}
 80014be:	bf00      	nop
 80014c0:	3714      	adds	r7, #20
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bc80      	pop	{r7}
 80014c6:	4770      	bx	lr
 80014c8:	40012c00 	.word	0x40012c00
 80014cc:	40000400 	.word	0x40000400
 80014d0:	40000800 	.word	0x40000800

080014d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b087      	sub	sp, #28
 80014d8:	af00      	add	r7, sp, #0
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 80014e0:	2300      	movs	r3, #0
 80014e2:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 80014e4:	2300      	movs	r3, #0
 80014e6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	6a1b      	ldr	r3, [r3, #32]
 80014ec:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	6a1b      	ldr	r3, [r3, #32]
 80014f2:	f023 0201 	bic.w	r2, r3, #1
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	699b      	ldr	r3, [r3, #24]
 80014fe:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001506:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	011b      	lsls	r3, r3, #4
 800150c:	697a      	ldr	r2, [r7, #20]
 800150e:	4313      	orrs	r3, r2
 8001510:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	f023 030a 	bic.w	r3, r3, #10
 8001518:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	4313      	orrs	r3, r2
 8001520:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	697a      	ldr	r2, [r7, #20]
 8001526:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	621a      	str	r2, [r3, #32]
}
 800152e:	bf00      	nop
 8001530:	371c      	adds	r7, #28
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr

08001538 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001538:	b480      	push	{r7}
 800153a:	b087      	sub	sp, #28
 800153c:	af00      	add	r7, sp, #0
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	60b9      	str	r1, [r7, #8]
 8001542:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8001544:	2300      	movs	r3, #0
 8001546:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8001548:	2300      	movs	r3, #0
 800154a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	6a1b      	ldr	r3, [r3, #32]
 8001550:	f023 0210 	bic.w	r2, r3, #16
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	699b      	ldr	r3, [r3, #24]
 800155c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	6a1b      	ldr	r3, [r3, #32]
 8001562:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800156a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	031b      	lsls	r3, r3, #12
 8001570:	697a      	ldr	r2, [r7, #20]
 8001572:	4313      	orrs	r3, r2
 8001574:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800157c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	011b      	lsls	r3, r3, #4
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	4313      	orrs	r3, r2
 8001586:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	697a      	ldr	r2, [r7, #20]
 800158c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	693a      	ldr	r2, [r7, #16]
 8001592:	621a      	str	r2, [r3, #32]
}
 8001594:	bf00      	nop
 8001596:	371c      	adds	r7, #28
 8001598:	46bd      	mov	sp, r7
 800159a:	bc80      	pop	{r7}
 800159c:	4770      	bx	lr

0800159e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2 : Filtered Timer Input 2
  *            @arg TIM_TS_ETRF : External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 800159e:	b480      	push	{r7}
 80015a0:	b085      	sub	sp, #20
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
 80015a6:	460b      	mov	r3, r1
 80015a8:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 80015aa:	2300      	movs	r3, #0
 80015ac:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015ba:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80015bc:	887b      	ldrh	r3, [r7, #2]
 80015be:	f043 0307 	orr.w	r3, r3, #7
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	461a      	mov	r2, r3
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	68fa      	ldr	r2, [r7, #12]
 80015d0:	609a      	str	r2, [r3, #8]
}
 80015d2:	bf00      	nop
 80015d4:	3714      	adds	r7, #20
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bc80      	pop	{r7}
 80015da:	4770      	bx	lr

080015dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80015dc:	b480      	push	{r7}
 80015de:	b087      	sub	sp, #28
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	60b9      	str	r1, [r7, #8]
 80015e6:	607a      	str	r2, [r7, #4]
 80015e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 80015ea:	2300      	movs	r3, #0
 80015ec:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80015fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	021a      	lsls	r2, r3, #8
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	431a      	orrs	r2, r3
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	4313      	orrs	r3, r2
 8001608:	697a      	ldr	r2, [r7, #20]
 800160a:	4313      	orrs	r3, r2
 800160c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	697a      	ldr	r2, [r7, #20]
 8001612:	609a      	str	r2, [r3, #8]
}
 8001614:	bf00      	nop
 8001616:	371c      	adds	r7, #28
 8001618:	46bd      	mov	sp, r7
 800161a:	bc80      	pop	{r7}
 800161c:	4770      	bx	lr

0800161e <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 800161e:	b480      	push	{r7}
 8001620:	b083      	sub	sp, #12
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
 8001626:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800162e:	2b01      	cmp	r3, #1
 8001630:	d101      	bne.n	8001636 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001632:	2302      	movs	r3, #2
 8001634:	e032      	b.n	800169c <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2201      	movs	r2, #1
 800163a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2202      	movs	r2, #2
 8001642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	685a      	ldr	r2, [r3, #4]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001654:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	6859      	ldr	r1, [r3, #4]
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	430a      	orrs	r2, r1
 8001666:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	689a      	ldr	r2, [r3, #8]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001676:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	6899      	ldr	r1, [r3, #8]
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685a      	ldr	r2, [r3, #4]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	430a      	orrs	r2, r1
 8001688:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2201      	movs	r2, #1
 800168e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800169a:	2300      	movs	r3, #0
}
 800169c:	4618      	mov	r0, r3
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bc80      	pop	{r7}
 80016a4:	4770      	bx	lr

080016a6 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 80016a6:	b480      	push	{r7}
 80016a8:	b083      	sub	sp, #12
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 80016ae:	bf00      	nop
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bc80      	pop	{r7}
 80016b6:	4770      	bx	lr

080016b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bc80      	pop	{r7}
 80016c8:	4770      	bx	lr
	...

080016cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af04      	add	r7, sp, #16
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016d2:	f7fe fd3b 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016d6:	f000 f827 	bl	8001728 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016da:	f000 f8bd 	bl	8001858 <MX_GPIO_Init>
  MX_TIM1_Init();
 80016de:	f000 f86b 	bl	80017b8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  Init_SSerial(GPIOB, GPIO_PIN_13, GPIOB, GPIO_PIN_14, GPIO_PortSourceGPIOB, GPIO_PinSource14, EXTI_Line14, EXTI15_10_IRQn);
 80016e2:	2328      	movs	r3, #40	; 0x28
 80016e4:	9303      	str	r3, [sp, #12]
 80016e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016ea:	9302      	str	r3, [sp, #8]
 80016ec:	230e      	movs	r3, #14
 80016ee:	9301      	str	r3, [sp, #4]
 80016f0:	2301      	movs	r3, #1
 80016f2:	9300      	str	r3, [sp, #0]
 80016f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016f8:	4a08      	ldr	r2, [pc, #32]	; (800171c <main+0x50>)
 80016fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016fe:	4807      	ldr	r0, [pc, #28]	; (800171c <main+0x50>)
 8001700:	f000 fb3e 	bl	8001d80 <Init_SSerial>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(len>9)
 8001704:	4b06      	ldr	r3, [pc, #24]	; (8001720 <main+0x54>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	2b09      	cmp	r3, #9
 800170a:	d9fb      	bls.n	8001704 <main+0x38>
	  {
		  USART_Send(USART_buf, 10);
 800170c:	210a      	movs	r1, #10
 800170e:	4805      	ldr	r0, [pc, #20]	; (8001724 <main+0x58>)
 8001710:	f000 fa9c 	bl	8001c4c <USART_Send>
		  len =0;
 8001714:	4b02      	ldr	r3, [pc, #8]	; (8001720 <main+0x54>)
 8001716:	2200      	movs	r2, #0
 8001718:	701a      	strb	r2, [r3, #0]
	  if(len>9)
 800171a:	e7f3      	b.n	8001704 <main+0x38>
 800171c:	40010c00 	.word	0x40010c00
 8001720:	20000031 	.word	0x20000031
 8001724:	20000034 	.word	0x20000034

08001728 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b090      	sub	sp, #64	; 0x40
 800172c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800172e:	f107 0318 	add.w	r3, r7, #24
 8001732:	2228      	movs	r2, #40	; 0x28
 8001734:	2100      	movs	r1, #0
 8001736:	4618      	mov	r0, r3
 8001738:	f000 feb0 	bl	800249c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800173c:	1d3b      	adds	r3, r7, #4
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	605a      	str	r2, [r3, #4]
 8001744:	609a      	str	r2, [r3, #8]
 8001746:	60da      	str	r2, [r3, #12]
 8001748:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800174a:	2301      	movs	r3, #1
 800174c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800174e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001752:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001754:	2300      	movs	r3, #0
 8001756:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001758:	2301      	movs	r3, #1
 800175a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800175c:	2302      	movs	r3, #2
 800175e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001760:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001764:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001766:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800176a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800176c:	f107 0318 	add.w	r3, r7, #24
 8001770:	4618      	mov	r0, r3
 8001772:	f7fe ffcd 	bl	8000710 <HAL_RCC_OscConfig>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800177c:	f000 f8b8 	bl	80018f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001780:	230f      	movs	r3, #15
 8001782:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001784:	2302      	movs	r3, #2
 8001786:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001788:	2300      	movs	r3, #0
 800178a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800178c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001790:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001792:	2300      	movs	r3, #0
 8001794:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001796:	1d3b      	adds	r3, r7, #4
 8001798:	2102      	movs	r1, #2
 800179a:	4618      	mov	r0, r3
 800179c:	f7ff fa1c 	bl	8000bd8 <HAL_RCC_ClockConfig>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <SystemClock_Config+0x82>
  {
    Error_Handler();
 80017a6:	f000 f8a3 	bl	80018f0 <Error_Handler>
  }
  /** Enables the Clock Security System 
  */
  HAL_RCC_EnableCSS();
 80017aa:	f7ff fb21 	bl	8000df0 <HAL_RCC_EnableCSS>
}
 80017ae:	bf00      	nop
 80017b0:	3740      	adds	r7, #64	; 0x40
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
	...

080017b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b086      	sub	sp, #24
 80017bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017be:	f107 0308 	add.w	r3, r7, #8
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	605a      	str	r2, [r3, #4]
 80017c8:	609a      	str	r2, [r3, #8]
 80017ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017cc:	463b      	mov	r3, r7
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017d4:	4b1e      	ldr	r3, [pc, #120]	; (8001850 <MX_TIM1_Init+0x98>)
 80017d6:	4a1f      	ldr	r2, [pc, #124]	; (8001854 <MX_TIM1_Init+0x9c>)
 80017d8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80017da:	4b1d      	ldr	r3, [pc, #116]	; (8001850 <MX_TIM1_Init+0x98>)
 80017dc:	2247      	movs	r2, #71	; 0x47
 80017de:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017e0:	4b1b      	ldr	r3, [pc, #108]	; (8001850 <MX_TIM1_Init+0x98>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9;
 80017e6:	4b1a      	ldr	r3, [pc, #104]	; (8001850 <MX_TIM1_Init+0x98>)
 80017e8:	2209      	movs	r2, #9
 80017ea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ec:	4b18      	ldr	r3, [pc, #96]	; (8001850 <MX_TIM1_Init+0x98>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017f2:	4b17      	ldr	r3, [pc, #92]	; (8001850 <MX_TIM1_Init+0x98>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017f8:	4b15      	ldr	r3, [pc, #84]	; (8001850 <MX_TIM1_Init+0x98>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80017fe:	4814      	ldr	r0, [pc, #80]	; (8001850 <MX_TIM1_Init+0x98>)
 8001800:	f7ff fb82 	bl	8000f08 <HAL_TIM_Base_Init>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 800180a:	f000 f871 	bl	80018f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800180e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001812:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001814:	f107 0308 	add.w	r3, r7, #8
 8001818:	4619      	mov	r1, r3
 800181a:	480d      	ldr	r0, [pc, #52]	; (8001850 <MX_TIM1_Init+0x98>)
 800181c:	f7ff fceb 	bl	80011f6 <HAL_TIM_ConfigClockSource>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8001826:	f000 f863 	bl	80018f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800182a:	2300      	movs	r3, #0
 800182c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800182e:	2300      	movs	r3, #0
 8001830:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001832:	463b      	mov	r3, r7
 8001834:	4619      	mov	r1, r3
 8001836:	4806      	ldr	r0, [pc, #24]	; (8001850 <MX_TIM1_Init+0x98>)
 8001838:	f7ff fef1 	bl	800161e <HAL_TIMEx_MasterConfigSynchronization>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8001842:	f000 f855 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001846:	bf00      	nop
 8001848:	3718      	adds	r7, #24
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	20000044 	.word	0x20000044
 8001854:	40012c00 	.word	0x40012c00

08001858 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b088      	sub	sp, #32
 800185c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800185e:	f107 0310 	add.w	r3, r7, #16
 8001862:	2200      	movs	r2, #0
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	605a      	str	r2, [r3, #4]
 8001868:	609a      	str	r2, [r3, #8]
 800186a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800186c:	4b1e      	ldr	r3, [pc, #120]	; (80018e8 <MX_GPIO_Init+0x90>)
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	4a1d      	ldr	r2, [pc, #116]	; (80018e8 <MX_GPIO_Init+0x90>)
 8001872:	f043 0310 	orr.w	r3, r3, #16
 8001876:	6193      	str	r3, [r2, #24]
 8001878:	4b1b      	ldr	r3, [pc, #108]	; (80018e8 <MX_GPIO_Init+0x90>)
 800187a:	699b      	ldr	r3, [r3, #24]
 800187c:	f003 0310 	and.w	r3, r3, #16
 8001880:	60fb      	str	r3, [r7, #12]
 8001882:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001884:	4b18      	ldr	r3, [pc, #96]	; (80018e8 <MX_GPIO_Init+0x90>)
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	4a17      	ldr	r2, [pc, #92]	; (80018e8 <MX_GPIO_Init+0x90>)
 800188a:	f043 0320 	orr.w	r3, r3, #32
 800188e:	6193      	str	r3, [r2, #24]
 8001890:	4b15      	ldr	r3, [pc, #84]	; (80018e8 <MX_GPIO_Init+0x90>)
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	f003 0320 	and.w	r3, r3, #32
 8001898:	60bb      	str	r3, [r7, #8]
 800189a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800189c:	4b12      	ldr	r3, [pc, #72]	; (80018e8 <MX_GPIO_Init+0x90>)
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	4a11      	ldr	r2, [pc, #68]	; (80018e8 <MX_GPIO_Init+0x90>)
 80018a2:	f043 0304 	orr.w	r3, r3, #4
 80018a6:	6193      	str	r3, [r2, #24]
 80018a8:	4b0f      	ldr	r3, [pc, #60]	; (80018e8 <MX_GPIO_Init+0x90>)
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	f003 0304 	and.w	r3, r3, #4
 80018b0:	607b      	str	r3, [r7, #4]
 80018b2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80018b4:	2200      	movs	r2, #0
 80018b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018ba:	480c      	ldr	r0, [pc, #48]	; (80018ec <MX_GPIO_Init+0x94>)
 80018bc:	f7fe ff10 	bl	80006e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80018c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c6:	2301      	movs	r3, #1
 80018c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ce:	2302      	movs	r3, #2
 80018d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018d2:	f107 0310 	add.w	r3, r7, #16
 80018d6:	4619      	mov	r1, r3
 80018d8:	4804      	ldr	r0, [pc, #16]	; (80018ec <MX_GPIO_Init+0x94>)
 80018da:	f7fe fda3 	bl	8000424 <HAL_GPIO_Init>

}
 80018de:	bf00      	nop
 80018e0:	3720      	adds	r7, #32
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40021000 	.word	0x40021000
 80018ec:	40011000 	.word	0x40011000

080018f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80018f4:	bf00      	nop
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bc80      	pop	{r7}
 80018fa:	4770      	bx	lr

080018fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001902:	4b15      	ldr	r3, [pc, #84]	; (8001958 <HAL_MspInit+0x5c>)
 8001904:	699b      	ldr	r3, [r3, #24]
 8001906:	4a14      	ldr	r2, [pc, #80]	; (8001958 <HAL_MspInit+0x5c>)
 8001908:	f043 0301 	orr.w	r3, r3, #1
 800190c:	6193      	str	r3, [r2, #24]
 800190e:	4b12      	ldr	r3, [pc, #72]	; (8001958 <HAL_MspInit+0x5c>)
 8001910:	699b      	ldr	r3, [r3, #24]
 8001912:	f003 0301 	and.w	r3, r3, #1
 8001916:	60bb      	str	r3, [r7, #8]
 8001918:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800191a:	4b0f      	ldr	r3, [pc, #60]	; (8001958 <HAL_MspInit+0x5c>)
 800191c:	69db      	ldr	r3, [r3, #28]
 800191e:	4a0e      	ldr	r2, [pc, #56]	; (8001958 <HAL_MspInit+0x5c>)
 8001920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001924:	61d3      	str	r3, [r2, #28]
 8001926:	4b0c      	ldr	r3, [pc, #48]	; (8001958 <HAL_MspInit+0x5c>)
 8001928:	69db      	ldr	r3, [r3, #28]
 800192a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800192e:	607b      	str	r3, [r7, #4]
 8001930:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001932:	4b0a      	ldr	r3, [pc, #40]	; (800195c <HAL_MspInit+0x60>)
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	4a04      	ldr	r2, [pc, #16]	; (800195c <HAL_MspInit+0x60>)
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800194e:	bf00      	nop
 8001950:	3714      	adds	r7, #20
 8001952:	46bd      	mov	sp, r7
 8001954:	bc80      	pop	{r7}
 8001956:	4770      	bx	lr
 8001958:	40021000 	.word	0x40021000
 800195c:	40010000 	.word	0x40010000

08001960 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a0d      	ldr	r2, [pc, #52]	; (80019a4 <HAL_TIM_Base_MspInit+0x44>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d113      	bne.n	800199a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001972:	4b0d      	ldr	r3, [pc, #52]	; (80019a8 <HAL_TIM_Base_MspInit+0x48>)
 8001974:	699b      	ldr	r3, [r3, #24]
 8001976:	4a0c      	ldr	r2, [pc, #48]	; (80019a8 <HAL_TIM_Base_MspInit+0x48>)
 8001978:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800197c:	6193      	str	r3, [r2, #24]
 800197e:	4b0a      	ldr	r3, [pc, #40]	; (80019a8 <HAL_TIM_Base_MspInit+0x48>)
 8001980:	699b      	ldr	r3, [r3, #24]
 8001982:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800198a:	2200      	movs	r2, #0
 800198c:	2100      	movs	r1, #0
 800198e:	2019      	movs	r0, #25
 8001990:	f7fe fd11 	bl	80003b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001994:	2019      	movs	r0, #25
 8001996:	f7fe fd2a 	bl	80003ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800199a:	bf00      	nop
 800199c:	3710      	adds	r7, #16
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	40012c00 	.word	0x40012c00
 80019a8:	40021000 	.word	0x40021000

080019ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80019b0:	bf00      	nop
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bc80      	pop	{r7}
 80019b6:	4770      	bx	lr

080019b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019bc:	e7fe      	b.n	80019bc <HardFault_Handler+0x4>

080019be <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019be:	b480      	push	{r7}
 80019c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019c2:	e7fe      	b.n	80019c2 <MemManage_Handler+0x4>

080019c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019c8:	e7fe      	b.n	80019c8 <BusFault_Handler+0x4>

080019ca <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019ca:	b480      	push	{r7}
 80019cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019ce:	e7fe      	b.n	80019ce <UsageFault_Handler+0x4>

080019d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019d4:	bf00      	nop
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bc80      	pop	{r7}
 80019da:	4770      	bx	lr

080019dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019e0:	bf00      	nop
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bc80      	pop	{r7}
 80019e6:	4770      	bx	lr

080019e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019ec:	bf00      	nop
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bc80      	pop	{r7}
 80019f2:	4770      	bx	lr

080019f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019f8:	f7fe fbee 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019fc:	bf00      	nop
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
	soft_counter++;
 8001a04:	4b04      	ldr	r3, [pc, #16]	; (8001a18 <TIM1_UP_IRQHandler+0x18>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	4a03      	ldr	r2, [pc, #12]	; (8001a18 <TIM1_UP_IRQHandler+0x18>)
 8001a0c:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a0e:	4803      	ldr	r0, [pc, #12]	; (8001a1c <TIM1_UP_IRQHandler+0x1c>)
 8001a10:	f7ff fae9 	bl	8000fe6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001a14:	bf00      	nop
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	2000002c 	.word	0x2000002c
 8001a1c:	20000044 	.word	0x20000044

08001a20 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001a24:	4b15      	ldr	r3, [pc, #84]	; (8001a7c <SystemInit+0x5c>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a14      	ldr	r2, [pc, #80]	; (8001a7c <SystemInit+0x5c>)
 8001a2a:	f043 0301 	orr.w	r3, r3, #1
 8001a2e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001a30:	4b12      	ldr	r3, [pc, #72]	; (8001a7c <SystemInit+0x5c>)
 8001a32:	685a      	ldr	r2, [r3, #4]
 8001a34:	4911      	ldr	r1, [pc, #68]	; (8001a7c <SystemInit+0x5c>)
 8001a36:	4b12      	ldr	r3, [pc, #72]	; (8001a80 <SystemInit+0x60>)
 8001a38:	4013      	ands	r3, r2
 8001a3a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001a3c:	4b0f      	ldr	r3, [pc, #60]	; (8001a7c <SystemInit+0x5c>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a0e      	ldr	r2, [pc, #56]	; (8001a7c <SystemInit+0x5c>)
 8001a42:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001a46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a4a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001a4c:	4b0b      	ldr	r3, [pc, #44]	; (8001a7c <SystemInit+0x5c>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a0a      	ldr	r2, [pc, #40]	; (8001a7c <SystemInit+0x5c>)
 8001a52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a56:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001a58:	4b08      	ldr	r3, [pc, #32]	; (8001a7c <SystemInit+0x5c>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	4a07      	ldr	r2, [pc, #28]	; (8001a7c <SystemInit+0x5c>)
 8001a5e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001a62:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001a64:	4b05      	ldr	r3, [pc, #20]	; (8001a7c <SystemInit+0x5c>)
 8001a66:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001a6a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001a6c:	4b05      	ldr	r3, [pc, #20]	; (8001a84 <SystemInit+0x64>)
 8001a6e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a72:	609a      	str	r2, [r3, #8]
#endif 
}
 8001a74:	bf00      	nop
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bc80      	pop	{r7}
 8001a7a:	4770      	bx	lr
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	f8ff0000 	.word	0xf8ff0000
 8001a84:	e000ed00 	.word	0xe000ed00

08001a88 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001a88:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001a8a:	e003      	b.n	8001a94 <LoopCopyDataInit>

08001a8c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001a8c:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001a8e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001a90:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001a92:	3104      	adds	r1, #4

08001a94 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001a94:	480a      	ldr	r0, [pc, #40]	; (8001ac0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001a96:	4b0b      	ldr	r3, [pc, #44]	; (8001ac4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001a98:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001a9a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001a9c:	d3f6      	bcc.n	8001a8c <CopyDataInit>
  ldr r2, =_sbss
 8001a9e:	4a0a      	ldr	r2, [pc, #40]	; (8001ac8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001aa0:	e002      	b.n	8001aa8 <LoopFillZerobss>

08001aa2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001aa2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001aa4:	f842 3b04 	str.w	r3, [r2], #4

08001aa8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001aa8:	4b08      	ldr	r3, [pc, #32]	; (8001acc <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001aaa:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001aac:	d3f9      	bcc.n	8001aa2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001aae:	f7ff ffb7 	bl	8001a20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ab2:	f000 fccf 	bl	8002454 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ab6:	f7ff fe09 	bl	80016cc <main>
  bx lr
 8001aba:	4770      	bx	lr
  ldr r3, =_sidata
 8001abc:	080024f0 	.word	0x080024f0
  ldr r0, =_sdata
 8001ac0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001ac4:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8001ac8:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8001acc:	20000084 	.word	0x20000084

08001ad0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ad0:	e7fe      	b.n	8001ad0 <ADC1_2_IRQHandler>

08001ad2 <IOConfig>:
u8 len = 0;	//���ռ���
u8 USART_buf[11]={0};  //���ջ�����

void IOConfig(GPIO_TypeDef *TX_PORT, uint16_t GPIO_PIN_TX, GPIO_TypeDef *RX_PORT, uint16_t GPIO_PIN_RX,
uint8_t GPIO_PortSourcRX, uint8_t GPIO_PinSourceRX, uint32_t EXTI_LineRX, IRQn_Type* NVIC_IRQChannelRX)
 {
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b088      	sub	sp, #32
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	60f8      	str	r0, [r7, #12]
 8001ada:	607a      	str	r2, [r7, #4]
 8001adc:	461a      	mov	r2, r3
 8001ade:	460b      	mov	r3, r1
 8001ae0:	817b      	strh	r3, [r7, #10]
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	813b      	strh	r3, [r7, #8]
	SOFT_GPIO_InitTypeDef  GPIO_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;
 	EXTI_InitTypeDef EXTI_InitStruct;
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO|RCC_APB2Periph_GPIOB|RCC_APB2Periph_GPIOC|RCC_APB2Periph_GPIOA, ENABLE);	 //Ê¹ÄÜPB,PC¶Ë¿ÚÊ±ÖÓ
 8001ae6:	2101      	movs	r1, #1
 8001ae8:	201d      	movs	r0, #29
 8001aea:	f000 fbbb 	bl	8002264 <RCC_APB2PeriphClockCmd>

	 //SoftWare Serial TXD
	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_TX;
 8001aee:	897b      	ldrh	r3, [r7, #10]
 8001af0:	83bb      	strh	r3, [r7, #28]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; 		 //�?Æ�?ìÊä³ö
 8001af2:	2310      	movs	r3, #16
 8001af4:	77fb      	strb	r3, [r7, #31]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;		 //IO¿ÚËÙ¶ÈÎª50MHz
 8001af6:	2303      	movs	r3, #3
 8001af8:	77bb      	strb	r3, [r7, #30]
  GPIO_Init(TX_PORT, &GPIO_InitStructure);
 8001afa:	f107 031c 	add.w	r3, r7, #28
 8001afe:	4619      	mov	r1, r3
 8001b00:	68f8      	ldr	r0, [r7, #12]
 8001b02:	f000 fa31 	bl	8001f68 <GPIO_Init>
  GPIO_SetBits(TX_PORT ,GPIO_PIN_TX);
 8001b06:	897b      	ldrh	r3, [r7, #10]
 8001b08:	4619      	mov	r1, r3
 8001b0a:	68f8      	ldr	r0, [r7, #12]
 8001b0c:	f000 fae8 	bl	80020e0 <GPIO_SetBits>


	//SoftWare Serial RXD
	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_RX;
 8001b10:	893b      	ldrh	r3, [r7, #8]
 8001b12:	83bb      	strh	r3, [r7, #28]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 8001b14:	2348      	movs	r3, #72	; 0x48
 8001b16:	77fb      	strb	r3, [r7, #31]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	77bb      	strb	r3, [r7, #30]
	GPIO_Init(RX_PORT, &GPIO_InitStructure);
 8001b1c:	f107 031c 	add.w	r3, r7, #28
 8001b20:	4619      	mov	r1, r3
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f000 fa20 	bl	8001f68 <GPIO_Init>

	GPIO_EXTILineConfig(GPIO_PortSourcRX, GPIO_PinSourceRX);
 8001b28:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001b2c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001b30:	4611      	mov	r1, r2
 8001b32:	4618      	mov	r0, r3
 8001b34:	f000 fae2 	bl	80020fc <GPIO_EXTILineConfig>
	EXTI_InitStruct.EXTI_Line =  EXTI_LineRX;
 8001b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b3a:	613b      	str	r3, [r7, #16]
	EXTI_InitStruct.EXTI_Mode=EXTI_Mode_Interrupt;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	753b      	strb	r3, [r7, #20]
	EXTI_InitStruct.EXTI_Trigger=EXTI_Trigger_Falling; //�?Â½µÑØ´¥·¢Ö�?¶�?
 8001b40:	230c      	movs	r3, #12
 8001b42:	757b      	strb	r3, [r7, #21]
	EXTI_InitStruct.EXTI_LineCmd=ENABLE;
 8001b44:	2301      	movs	r3, #1
 8001b46:	75bb      	strb	r3, [r7, #22]
	EXTI_Init(&EXTI_InitStruct);
 8001b48:	f107 0310 	add.w	r3, r7, #16
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f000 f971 	bl	8001e34 <EXTI_Init>


	NVIC_InitStructure.NVIC_IRQChannel= NVIC_IRQChannelRX ;
 8001b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	763b      	strb	r3, [r7, #24]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=2;
 8001b58:	2302      	movs	r3, #2
 8001b5a:	767b      	strb	r3, [r7, #25]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority =2;
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	76bb      	strb	r3, [r7, #26]
	NVIC_InitStructure.NVIC_IRQChannelCmd=ENABLE;
 8001b60:	2301      	movs	r3, #1
 8001b62:	76fb      	strb	r3, [r7, #27]
	NVIC_Init(&NVIC_InitStructure);
 8001b64:	f107 0318 	add.w	r3, r7, #24
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f000 fb19 	bl	80021a0 <NVIC_Init>
 }
 8001b6e:	bf00      	nop
 8001b70:	3720      	adds	r7, #32
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
	...

08001b78 <TIM4_Int_Init>:

	void TIM4_Int_Init(u16 arr,u16 psc)
	{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	4603      	mov	r3, r0
 8001b80:	460a      	mov	r2, r1
 8001b82:	80fb      	strh	r3, [r7, #6]
 8001b84:	4613      	mov	r3, r2
 8001b86:	80bb      	strh	r3, [r7, #4]

		SOFT_TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
		NVIC_InitTypeDef NVIC_InitStructure;

		RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE); //Ê±ÖÓÊ¹ÄÜ
 8001b88:	2101      	movs	r1, #1
 8001b8a:	2004      	movs	r0, #4
 8001b8c:	f000 fb88 	bl	80022a0 <RCC_APB1PeriphClockCmd>

		//¶¨Ê±Æ÷TIM4³õÊ¼»¯
		TIM_TimeBaseStructure.TIM_Period = arr; //ÉèÖÃÔÚ�?ÂÒ»¸ö¸ü�?ÂÊÂ¼þ×°Èë»î¶¯µÄ×Ô¶¯ÖØ×°ÔØ¼Ä´æÆ÷ÖÜÆÚµÄÖµ
 8001b90:	88fb      	ldrh	r3, [r7, #6]
 8001b92:	823b      	strh	r3, [r7, #16]
		TIM_TimeBaseStructure.TIM_Prescaler =psc; //ÉèÖÃÓÃÀ´×÷ÎªTIMxÊ±ÖÓÆµÂÊ³ýÊýµÄÔ¤·ÖÆµÖµ
 8001b94:	88bb      	ldrh	r3, [r7, #4]
 8001b96:	81bb      	strh	r3, [r7, #12]
		TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1; //ÉèÖÃÊ±ÖÓ·Ö¸î:TDTS = Tck_tim
 8001b98:	2300      	movs	r3, #0
 8001b9a:	827b      	strh	r3, [r7, #18]
		TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;  //TIM�?òÉ�?¼ÆÊýÄ£Ê½
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	81fb      	strh	r3, [r7, #14]
		SOFT_TIM_TimeBaseInit(SOFT_TIM4, &TIM_TimeBaseStructure); //¸ù¾�?Ö¸¶¨µÄ²ÎÊý³õÊ¼»¯TIMxµÄÊ±¼ä»ùÊýµ¥Î»
 8001ba0:	f107 030c 	add.w	r3, r7, #12
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	480e      	ldr	r0, [pc, #56]	; (8001be0 <TIM4_Int_Init+0x68>)
 8001ba8:	f000 fb98 	bl	80022dc <SOFT_TIM_TimeBaseInit>
		SOFT_TIM_ClearITPendingBit(SOFT_TIM4, TIM_FLAG_Update);
 8001bac:	2101      	movs	r1, #1
 8001bae:	480c      	ldr	r0, [pc, #48]	; (8001be0 <TIM4_Int_Init+0x68>)
 8001bb0:	f000 fbe2 	bl	8002378 <SOFT_TIM_ClearITPendingBit>
		SOFT_TIM_ITConfig(SOFT_TIM4,TIM_IT_Update,ENABLE ); //Ê¹ÄÜÖ¸¶¨µÄTIM3Ö�?¶�?,ÔÊ�?í¸ü�?ÂÖ�?¶�?
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	2101      	movs	r1, #1
 8001bb8:	4809      	ldr	r0, [pc, #36]	; (8001be0 <TIM4_Int_Init+0x68>)
 8001bba:	f000 fbed 	bl	8002398 <SOFT_TIM_ITConfig>

		//Ö�?¶�?ÓÅ�?È¼¶NVICÉèÖÃ
		NVIC_InitStructure.NVIC_IRQChannel = TIM4_IRQn;  //TIM4Ö�?¶�?
 8001bbe:	231e      	movs	r3, #30
 8001bc0:	723b      	strb	r3, [r7, #8]
		NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;  //�?ÈÕ¼ÓÅ�?È¼¶1¼¶
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	727b      	strb	r3, [r7, #9]
		NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;  //´ÓÓÅ�?È¼¶1¼¶
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	72bb      	strb	r3, [r7, #10]
		NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE; //IRQ�?¨µÀ±»Ê¹ÄÜ
 8001bca:	2301      	movs	r3, #1
 8001bcc:	72fb      	strb	r3, [r7, #11]
		NVIC_Init(&NVIC_InitStructure);  //³õÊ¼»¯NVIC¼Ä´æÆ÷
 8001bce:	f107 0308 	add.w	r3, r7, #8
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f000 fae4 	bl	80021a0 <NVIC_Init>
	}
 8001bd8:	bf00      	nop
 8001bda:	3718      	adds	r7, #24
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	40000800 	.word	0x40000800

08001be4 <IO_TXD>:

	void IO_TXD(u8 Data)
	{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	4603      	mov	r3, r0
 8001bec:	71fb      	strb	r3, [r7, #7]
		u8 i = 0;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	73fb      	strb	r3, [r7, #15]
		OI_TXD = 0;
 8001bf2:	4b15      	ldr	r3, [pc, #84]	; (8001c48 <IO_TXD+0x64>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
		delay_us(BuadRate_9600);
 8001bf8:	2064      	movs	r0, #100	; 0x64
 8001bfa:	f000 f8f5 	bl	8001de8 <delay_us>
		for(i = 0; i < 8; i++)
 8001bfe:	2300      	movs	r3, #0
 8001c00:	73fb      	strb	r3, [r7, #15]
 8001c02:	e014      	b.n	8001c2e <IO_TXD+0x4a>
		{
			if(Data&0x01)
 8001c04:	79fb      	ldrb	r3, [r7, #7]
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d003      	beq.n	8001c16 <IO_TXD+0x32>
				OI_TXD = 1;
 8001c0e:	4b0e      	ldr	r3, [pc, #56]	; (8001c48 <IO_TXD+0x64>)
 8001c10:	2201      	movs	r2, #1
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	e002      	b.n	8001c1c <IO_TXD+0x38>
			else
				OI_TXD = 0;
 8001c16:	4b0c      	ldr	r3, [pc, #48]	; (8001c48 <IO_TXD+0x64>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]

			delay_us(BuadRate_9600);
 8001c1c:	2064      	movs	r0, #100	; 0x64
 8001c1e:	f000 f8e3 	bl	8001de8 <delay_us>
			Data = Data>>1;
 8001c22:	79fb      	ldrb	r3, [r7, #7]
 8001c24:	085b      	lsrs	r3, r3, #1
 8001c26:	71fb      	strb	r3, [r7, #7]
		for(i = 0; i < 8; i++)
 8001c28:	7bfb      	ldrb	r3, [r7, #15]
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	73fb      	strb	r3, [r7, #15]
 8001c2e:	7bfb      	ldrb	r3, [r7, #15]
 8001c30:	2b07      	cmp	r3, #7
 8001c32:	d9e7      	bls.n	8001c04 <IO_TXD+0x20>
		}
		OI_TXD = 1;
 8001c34:	4b04      	ldr	r3, [pc, #16]	; (8001c48 <IO_TXD+0x64>)
 8001c36:	2201      	movs	r2, #1
 8001c38:	601a      	str	r2, [r3, #0]
		delay_us(BuadRate_9600);
 8001c3a:	2064      	movs	r0, #100	; 0x64
 8001c3c:	f000 f8d4 	bl	8001de8 <delay_us>
	}
 8001c40:	bf00      	nop
 8001c42:	3710      	adds	r7, #16
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	422181b4 	.word	0x422181b4

08001c4c <USART_Send>:

	///////////////////
	void USART_Send(u8 *buf, u8 len)
	{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	460b      	mov	r3, r1
 8001c56:	70fb      	strb	r3, [r7, #3]
		u8 t;
		for(t = 0; t < len; t++)
 8001c58:	2300      	movs	r3, #0
 8001c5a:	73fb      	strb	r3, [r7, #15]
 8001c5c:	e009      	b.n	8001c72 <USART_Send+0x26>
		{
			IO_TXD(buf[t]);
 8001c5e:	7bfb      	ldrb	r3, [r7, #15]
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	4413      	add	r3, r2
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7ff ffbc 	bl	8001be4 <IO_TXD>
		for(t = 0; t < len; t++)
 8001c6c:	7bfb      	ldrb	r3, [r7, #15]
 8001c6e:	3301      	adds	r3, #1
 8001c70:	73fb      	strb	r3, [r7, #15]
 8001c72:	7bfa      	ldrb	r2, [r7, #15]
 8001c74:	78fb      	ldrb	r3, [r7, #3]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d3f1      	bcc.n	8001c5e <USART_Send+0x12>
		}
	}
 8001c7a:	bf00      	nop
 8001c7c:	3710      	adds	r7, #16
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
	...

08001c84 <EXTI15_10_IRQHandler>:

	void EXTI15_10_IRQHandler(void)
	{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0

		if(EXTI_GetFlagStatus(EXTI_Line14) != RESET)
 8001c88:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001c8c:	f000 f944 	bl	8001f18 <EXTI_GetFlagStatus>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d012      	beq.n	8001cbc <EXTI15_10_IRQHandler+0x38>
		{
			if(OI_RXD == 0)
 8001c96:	4b0a      	ldr	r3, [pc, #40]	; (8001cc0 <EXTI15_10_IRQHandler+0x3c>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d10a      	bne.n	8001cb4 <EXTI15_10_IRQHandler+0x30>
			{
				if(recvStat == COM_STOP_BIT)
 8001c9e:	4b09      	ldr	r3, [pc, #36]	; (8001cc4 <EXTI15_10_IRQHandler+0x40>)
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	2b09      	cmp	r3, #9
 8001ca4:	d106      	bne.n	8001cb4 <EXTI15_10_IRQHandler+0x30>
				{
					recvStat = COM_START_BIT;
 8001ca6:	4b07      	ldr	r3, [pc, #28]	; (8001cc4 <EXTI15_10_IRQHandler+0x40>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	701a      	strb	r2, [r3, #0]
					SOFT_TIM_Cmd(SOFT_TIM4, ENABLE);
 8001cac:	2101      	movs	r1, #1
 8001cae:	4806      	ldr	r0, [pc, #24]	; (8001cc8 <EXTI15_10_IRQHandler+0x44>)
 8001cb0:	f000 fb95 	bl	80023de <SOFT_TIM_Cmd>
				}
			}
			EXTI_ClearITPendingBit(EXTI_Line14);
 8001cb4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001cb8:	f000 f948 	bl	8001f4c <EXTI_ClearITPendingBit>
		}
	}
 8001cbc:	bf00      	nop
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	42218138 	.word	0x42218138
 8001cc4:	2000000c 	.word	0x2000000c
 8001cc8:	40000800 	.word	0x40000800

08001ccc <TIM4_IRQHandler>:
	///////////////////////
	void TIM4_IRQHandler(void)
	{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
		if(SOFT_TIM_GetFlagStatus(SOFT_TIM4, TIM_FLAG_Update) != RESET)
 8001cd0:	2101      	movs	r1, #1
 8001cd2:	4825      	ldr	r0, [pc, #148]	; (8001d68 <TIM4_IRQHandler+0x9c>)
 8001cd4:	f000 fba2 	bl	800241c <SOFT_TIM_GetFlagStatus>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d042      	beq.n	8001d64 <TIM4_IRQHandler+0x98>
		{
			SOFT_TIM_ClearITPendingBit(SOFT_TIM4, TIM_FLAG_Update);
 8001cde:	2101      	movs	r1, #1
 8001ce0:	4821      	ldr	r0, [pc, #132]	; (8001d68 <TIM4_IRQHandler+0x9c>)
 8001ce2:	f000 fb49 	bl	8002378 <SOFT_TIM_ClearITPendingBit>
			 recvStat++;
 8001ce6:	4b21      	ldr	r3, [pc, #132]	; (8001d6c <TIM4_IRQHandler+0xa0>)
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	3301      	adds	r3, #1
 8001cec:	b2da      	uxtb	r2, r3
 8001cee:	4b1f      	ldr	r3, [pc, #124]	; (8001d6c <TIM4_IRQHandler+0xa0>)
 8001cf0:	701a      	strb	r2, [r3, #0]
			if(recvStat == COM_STOP_BIT)
 8001cf2:	4b1e      	ldr	r3, [pc, #120]	; (8001d6c <TIM4_IRQHandler+0xa0>)
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	2b09      	cmp	r3, #9
 8001cf8:	d10f      	bne.n	8001d1a <TIM4_IRQHandler+0x4e>
			{
				SOFT_TIM_Cmd(SOFT_TIM4, DISABLE);
 8001cfa:	2100      	movs	r1, #0
 8001cfc:	481a      	ldr	r0, [pc, #104]	; (8001d68 <TIM4_IRQHandler+0x9c>)
 8001cfe:	f000 fb6e 	bl	80023de <SOFT_TIM_Cmd>
				USART_buf[len++] = recvData;
 8001d02:	4b1b      	ldr	r3, [pc, #108]	; (8001d70 <TIM4_IRQHandler+0xa4>)
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	1c5a      	adds	r2, r3, #1
 8001d08:	b2d1      	uxtb	r1, r2
 8001d0a:	4a19      	ldr	r2, [pc, #100]	; (8001d70 <TIM4_IRQHandler+0xa4>)
 8001d0c:	7011      	strb	r1, [r2, #0]
 8001d0e:	461a      	mov	r2, r3
 8001d10:	4b18      	ldr	r3, [pc, #96]	; (8001d74 <TIM4_IRQHandler+0xa8>)
 8001d12:	7819      	ldrb	r1, [r3, #0]
 8001d14:	4b18      	ldr	r3, [pc, #96]	; (8001d78 <TIM4_IRQHandler+0xac>)
 8001d16:	5499      	strb	r1, [r3, r2]
				return;
 8001d18:	e024      	b.n	8001d64 <TIM4_IRQHandler+0x98>
			}
			if(OI_RXD)
 8001d1a:	4b18      	ldr	r3, [pc, #96]	; (8001d7c <TIM4_IRQHandler+0xb0>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d00f      	beq.n	8001d42 <TIM4_IRQHandler+0x76>
			{
				recvData |= (1 << (recvStat - 1));
 8001d22:	4b12      	ldr	r3, [pc, #72]	; (8001d6c <TIM4_IRQHandler+0xa0>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	3b01      	subs	r3, #1
 8001d28:	2201      	movs	r2, #1
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	b25a      	sxtb	r2, r3
 8001d30:	4b10      	ldr	r3, [pc, #64]	; (8001d74 <TIM4_IRQHandler+0xa8>)
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	b25b      	sxtb	r3, r3
 8001d36:	4313      	orrs	r3, r2
 8001d38:	b25b      	sxtb	r3, r3
 8001d3a:	b2da      	uxtb	r2, r3
 8001d3c:	4b0d      	ldr	r3, [pc, #52]	; (8001d74 <TIM4_IRQHandler+0xa8>)
 8001d3e:	701a      	strb	r2, [r3, #0]
 8001d40:	e010      	b.n	8001d64 <TIM4_IRQHandler+0x98>
			}else{
				recvData &= ~(1 << (recvStat - 1));
 8001d42:	4b0a      	ldr	r3, [pc, #40]	; (8001d6c <TIM4_IRQHandler+0xa0>)
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	3b01      	subs	r3, #1
 8001d48:	2201      	movs	r2, #1
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	b25b      	sxtb	r3, r3
 8001d50:	43db      	mvns	r3, r3
 8001d52:	b25a      	sxtb	r2, r3
 8001d54:	4b07      	ldr	r3, [pc, #28]	; (8001d74 <TIM4_IRQHandler+0xa8>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	b25b      	sxtb	r3, r3
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	b25b      	sxtb	r3, r3
 8001d5e:	b2da      	uxtb	r2, r3
 8001d60:	4b04      	ldr	r3, [pc, #16]	; (8001d74 <TIM4_IRQHandler+0xa8>)
 8001d62:	701a      	strb	r2, [r3, #0]
			}
	  }
	}
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	40000800 	.word	0x40000800
 8001d6c:	2000000c 	.word	0x2000000c
 8001d70:	20000031 	.word	0x20000031
 8001d74:	20000030 	.word	0x20000030
 8001d78:	20000034 	.word	0x20000034
 8001d7c:	42218138 	.word	0x42218138

08001d80 <Init_SSerial>:
//////////////////////////////
	void Init_SSerial(GPIO_TypeDef *TX_PORT, uint16_t GPIO_PIN_TX, GPIO_TypeDef *RX_PORT, uint16_t GPIO_PIN_RX,
			uint8_t GPIO_PortSourcRX, uint8_t GPIO_PinSourceRX,  uint32_t EXTI_LineRX, IRQn_Type* NVIC_IRQChannelRX)
	{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b088      	sub	sp, #32
 8001d84:	af04      	add	r7, sp, #16
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	607a      	str	r2, [r7, #4]
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	817b      	strh	r3, [r7, #10]
 8001d90:	4613      	mov	r3, r2
 8001d92:	813b      	strh	r3, [r7, #8]
		  NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
 8001d94:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001d98:	f000 f9f0 	bl	800217c <NVIC_PriorityGroupConfig>
		  delay_init();
 8001d9c:	f000 f818 	bl	8001dd0 <delay_init>
		  IOConfig(TX_PORT, GPIO_PIN_TX, RX_PORT, GPIO_PIN_RX, GPIO_PortSourcRX, GPIO_PinSourceRX, EXTI_LineRX, NVIC_IRQChannelRX);
 8001da0:	893a      	ldrh	r2, [r7, #8]
 8001da2:	8979      	ldrh	r1, [r7, #10]
 8001da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da6:	9303      	str	r3, [sp, #12]
 8001da8:	6a3b      	ldr	r3, [r7, #32]
 8001daa:	9302      	str	r3, [sp, #8]
 8001dac:	7f3b      	ldrb	r3, [r7, #28]
 8001dae:	9301      	str	r3, [sp, #4]
 8001db0:	7e3b      	ldrb	r3, [r7, #24]
 8001db2:	9300      	str	r3, [sp, #0]
 8001db4:	4613      	mov	r3, r2
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	68f8      	ldr	r0, [r7, #12]
 8001dba:	f7ff fe8a 	bl	8001ad2 <IOConfig>
		  TIM4_Int_Init(107, 71);	 //1M¼ÆÊýÆµÂÊHAL
 8001dbe:	2147      	movs	r1, #71	; 0x47
 8001dc0:	206b      	movs	r0, #107	; 0x6b
 8001dc2:	f7ff fed9 	bl	8001b78 <TIM4_Int_Init>

	}
 8001dc6:	bf00      	nop
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
	...

08001dd0 <delay_init>:

//��ʼ���ӳٺ���
//SYSTICK��ʱ�ӹ̶�ΪHCLKʱ�ӵ�1/8
//SYSCLK:ϵͳʱ��
void delay_init()
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
//	HAL_TIM_Base_Start(&htim1);
//	HAL_TIM_Base_Stop(&htim1);
	soft_counter=0;
 8001dd4:	4b03      	ldr	r3, [pc, #12]	; (8001de4 <delay_init+0x14>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	601a      	str	r2, [r3, #0]
//	SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK_Div8);	//ѡ���ⲿʱ��  HCLK/8
//	fac_us=SystemCoreClock/8000000;				//Ϊϵͳʱ�ӵ�1/8
//	fac_ms=(u16)fac_us*1000;					//��OS��,����ÿ��ms��Ҫ��systickʱ����
}								    
 8001dda:	bf00      	nop
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bc80      	pop	{r7}
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	2000002c 	.word	0x2000002c

08001de8 <delay_us>:

//��ʱnus
//nusΪҪ��ʱ��us��.		    								   
void delay_us(u32 nus)
{		
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
	if(nus<10) //we just need more than 10 micro second//so if you enter value less than 10 we change it to 10
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2b09      	cmp	r3, #9
 8001df4:	d801      	bhi.n	8001dfa <delay_us+0x12>
		nus=10;
 8001df6:	230a      	movs	r3, #10
 8001df8:	607b      	str	r3, [r7, #4]
	soft_counter=0;
 8001dfa:	4b0c      	ldr	r3, [pc, #48]	; (8001e2c <delay_us+0x44>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim1);
 8001e00:	480b      	ldr	r0, [pc, #44]	; (8001e30 <delay_us+0x48>)
 8001e02:	f7ff f8ac 	bl	8000f5e <HAL_TIM_Base_Start_IT>
	while(nus > soft_counter*10){};
 8001e06:	bf00      	nop
 8001e08:	4b08      	ldr	r3, [pc, #32]	; (8001e2c <delay_us+0x44>)
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	4413      	add	r3, r2
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	461a      	mov	r2, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d8f5      	bhi.n	8001e08 <delay_us+0x20>
	HAL_TIM_Base_Stop_IT(&htim1);
 8001e1c:	4804      	ldr	r0, [pc, #16]	; (8001e30 <delay_us+0x48>)
 8001e1e:	f7ff f8b8 	bl	8000f92 <HAL_TIM_Base_Stop_IT>
//	{
//		temp=SysTick->CTRL;
//	}while((temp&0x01)&&!(temp&(1<<16)));		//�ȴ�ʱ�䵽��
//	SysTick->CTRL&=~SysTick_CTRL_ENABLE_Msk;	//�رռ�����
//	SysTick->VAL =0X00;      					 //��ռ�����
}
 8001e22:	bf00      	nop
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	2000002c 	.word	0x2000002c
 8001e30:	20000044 	.word	0x20000044

08001e34 <EXTI_Init>:
#include "../inc/exti.h"

////////////FUNCTIONS
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8001e40:	4b34      	ldr	r3, [pc, #208]	; (8001f14 <EXTI_Init+0xe0>)
 8001e42:	60fb      	str	r3, [r7, #12]

  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	799b      	ldrb	r3, [r3, #6]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d04f      	beq.n	8001eec <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8001e4c:	4b31      	ldr	r3, [pc, #196]	; (8001f14 <EXTI_Init+0xe0>)
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	43db      	mvns	r3, r3
 8001e56:	492f      	ldr	r1, [pc, #188]	; (8001f14 <EXTI_Init+0xe0>)
 8001e58:	4013      	ands	r3, r2
 8001e5a:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8001e5c:	4b2d      	ldr	r3, [pc, #180]	; (8001f14 <EXTI_Init+0xe0>)
 8001e5e:	685a      	ldr	r2, [r3, #4]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	43db      	mvns	r3, r3
 8001e66:	492b      	ldr	r1, [pc, #172]	; (8001f14 <EXTI_Init+0xe0>)
 8001e68:	4013      	ands	r3, r2
 8001e6a:	604b      	str	r3, [r1, #4]

    tmp += EXTI_InitStruct->EXTI_Mode;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	791b      	ldrb	r3, [r3, #4]
 8001e70:	461a      	mov	r2, r3
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	4413      	add	r3, r2
 8001e76:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	6819      	ldr	r1, [r3, #0]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	430a      	orrs	r2, r1
 8001e84:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8001e86:	4b23      	ldr	r3, [pc, #140]	; (8001f14 <EXTI_Init+0xe0>)
 8001e88:	689a      	ldr	r2, [r3, #8]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	43db      	mvns	r3, r3
 8001e90:	4920      	ldr	r1, [pc, #128]	; (8001f14 <EXTI_Init+0xe0>)
 8001e92:	4013      	ands	r3, r2
 8001e94:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8001e96:	4b1f      	ldr	r3, [pc, #124]	; (8001f14 <EXTI_Init+0xe0>)
 8001e98:	68da      	ldr	r2, [r3, #12]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	43db      	mvns	r3, r3
 8001ea0:	491c      	ldr	r1, [pc, #112]	; (8001f14 <EXTI_Init+0xe0>)
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	60cb      	str	r3, [r1, #12]

    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	795b      	ldrb	r3, [r3, #5]
 8001eaa:	2b10      	cmp	r3, #16
 8001eac:	d10e      	bne.n	8001ecc <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8001eae:	4b19      	ldr	r3, [pc, #100]	; (8001f14 <EXTI_Init+0xe0>)
 8001eb0:	689a      	ldr	r2, [r3, #8]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4917      	ldr	r1, [pc, #92]	; (8001f14 <EXTI_Init+0xe0>)
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8001ebc:	4b15      	ldr	r3, [pc, #84]	; (8001f14 <EXTI_Init+0xe0>)
 8001ebe:	68da      	ldr	r2, [r3, #12]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4913      	ldr	r1, [pc, #76]	; (8001f14 <EXTI_Init+0xe0>)
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8001eca:	e01d      	b.n	8001f08 <EXTI_Init+0xd4>
      tmp = (uint32_t)EXTI_BASE;
 8001ecc:	4b11      	ldr	r3, [pc, #68]	; (8001f14 <EXTI_Init+0xe0>)
 8001ece:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	795b      	ldrb	r3, [r3, #5]
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	4413      	add	r3, r2
 8001eda:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6819      	ldr	r1, [r3, #0]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	601a      	str	r2, [r3, #0]
}
 8001eea:	e00d      	b.n	8001f08 <EXTI_Init+0xd4>
    tmp += EXTI_InitStruct->EXTI_Mode;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	791b      	ldrb	r3, [r3, #4]
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6819      	ldr	r1, [r3, #0]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	43da      	mvns	r2, r3
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	400a      	ands	r2, r1
 8001f06:	601a      	str	r2, [r3, #0]
}
 8001f08:	bf00      	nop
 8001f0a:	3714      	adds	r7, #20
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bc80      	pop	{r7}
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	40010400 	.word	0x40010400

08001f18 <EXTI_GetFlagStatus>:
/////////////////////////////////////////////////
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8001f20:	2300      	movs	r3, #0
 8001f22:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 8001f24:	4b08      	ldr	r3, [pc, #32]	; (8001f48 <EXTI_GetFlagStatus+0x30>)
 8001f26:	695a      	ldr	r2, [r3, #20]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d002      	beq.n	8001f36 <EXTI_GetFlagStatus+0x1e>
  {
    bitstatus = SET;
 8001f30:	2301      	movs	r3, #1
 8001f32:	73fb      	strb	r3, [r7, #15]
 8001f34:	e001      	b.n	8001f3a <EXTI_GetFlagStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 8001f36:	2300      	movs	r3, #0
 8001f38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3714      	adds	r7, #20
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bc80      	pop	{r7}
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	40010400 	.word	0x40010400

08001f4c <EXTI_ClearITPendingBit>:
//////////////////////////////////////////
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SOFT_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
 8001f54:	4a03      	ldr	r2, [pc, #12]	; (8001f64 <EXTI_ClearITPendingBit+0x18>)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6153      	str	r3, [r2, #20]
}
 8001f5a:	bf00      	nop
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bc80      	pop	{r7}
 8001f62:	4770      	bx	lr
 8001f64:	40010400 	.word	0x40010400

08001f68 <GPIO_Init>:
#include "../inc/gpio.h"

void GPIO_Init(GPIO_TypeDef* GPIOx, SOFT_GPIO_InitTypeDef* GPIO_InitStruct)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b089      	sub	sp, #36	; 0x24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8001f72:	2300      	movs	r3, #0
 8001f74:	61fb      	str	r3, [r7, #28]
 8001f76:	2300      	movs	r3, #0
 8001f78:	613b      	str	r3, [r7, #16]
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	61bb      	str	r3, [r7, #24]
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8001f82:	2300      	movs	r3, #0
 8001f84:	617b      	str	r3, [r7, #20]
 8001f86:	2300      	movs	r3, #0
 8001f88:	60bb      	str	r3, [r7, #8]
  assert_param(IS_SOFTWARE_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_SOFTWARE_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_SOFTWARE_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));

/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	78db      	ldrb	r3, [r3, #3]
 8001f8e:	f003 030f 	and.w	r3, r3, #15
 8001f92:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	78db      	ldrb	r3, [r3, #3]
 8001f98:	f003 0310 	and.w	r3, r3, #16
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d005      	beq.n	8001fac <GPIO_Init+0x44>
  {
    /* Check the parameters */
    assert_param(IS_SOFTWARE_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	789b      	ldrb	r3, [r3, #2]
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	881b      	ldrh	r3, [r3, #0]
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d044      	beq.n	8002040 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	61bb      	str	r3, [r7, #24]
 8001fc0:	e038      	b.n	8002034 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	881b      	ldrh	r3, [r3, #0]
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d126      	bne.n	800202e <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8001fe6:	220f      	movs	r2, #15
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	697a      	ldr	r2, [r7, #20]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8001ffa:	69fa      	ldr	r2, [r7, #28]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	697a      	ldr	r2, [r7, #20]
 8002004:	4313      	orrs	r3, r2
 8002006:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	78db      	ldrb	r3, [r3, #3]
 800200c:	2b28      	cmp	r3, #40	; 0x28
 800200e:	d105      	bne.n	800201c <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8002010:	2201      	movs	r2, #1
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	409a      	lsls	r2, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	615a      	str	r2, [r3, #20]
 800201a:	e008      	b.n	800202e <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	78db      	ldrb	r3, [r3, #3]
 8002020:	2b48      	cmp	r3, #72	; 0x48
 8002022:	d104      	bne.n	800202e <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8002024:	2201      	movs	r2, #1
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	409a      	lsls	r2, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	3301      	adds	r3, #1
 8002032:	61bb      	str	r3, [r7, #24]
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	2b07      	cmp	r3, #7
 8002038:	d9c3      	bls.n	8001fc2 <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	697a      	ldr	r2, [r7, #20]
 800203e:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	881b      	ldrh	r3, [r3, #0]
 8002044:	2bff      	cmp	r3, #255	; 0xff
 8002046:	d946      	bls.n	80020d6 <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800204e:	2300      	movs	r3, #0
 8002050:	61bb      	str	r3, [r7, #24]
 8002052:	e03a      	b.n	80020ca <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	3308      	adds	r3, #8
 8002058:	2201      	movs	r2, #1
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	881b      	ldrh	r3, [r3, #0]
 8002064:	461a      	mov	r2, r3
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	4013      	ands	r3, r2
 800206a:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 800206c:	693a      	ldr	r2, [r7, #16]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	429a      	cmp	r2, r3
 8002072:	d127      	bne.n	80020c4 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800207a:	220f      	movs	r2, #15
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	fa02 f303 	lsl.w	r3, r2, r3
 8002082:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	43db      	mvns	r3, r3
 8002088:	697a      	ldr	r2, [r7, #20]
 800208a:	4013      	ands	r3, r2
 800208c:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800208e:	69fa      	ldr	r2, [r7, #28]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	697a      	ldr	r2, [r7, #20]
 8002098:	4313      	orrs	r3, r2
 800209a:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	78db      	ldrb	r3, [r3, #3]
 80020a0:	2b28      	cmp	r3, #40	; 0x28
 80020a2:	d105      	bne.n	80020b0 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	3308      	adds	r3, #8
 80020a8:	2201      	movs	r2, #1
 80020aa:	409a      	lsls	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	78db      	ldrb	r3, [r3, #3]
 80020b4:	2b48      	cmp	r3, #72	; 0x48
 80020b6:	d105      	bne.n	80020c4 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	3308      	adds	r3, #8
 80020bc:	2201      	movs	r2, #1
 80020be:	409a      	lsls	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	3301      	adds	r3, #1
 80020c8:	61bb      	str	r3, [r7, #24]
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	2b07      	cmp	r3, #7
 80020ce:	d9c1      	bls.n	8002054 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	697a      	ldr	r2, [r7, #20]
 80020d4:	605a      	str	r2, [r3, #4]
  }
}
 80020d6:	bf00      	nop
 80020d8:	3724      	adds	r7, #36	; 0x24
 80020da:	46bd      	mov	sp, r7
 80020dc:	bc80      	pop	{r7}
 80020de:	4770      	bx	lr

080020e0 <GPIO_SetBits>:
/////////////////////////////////////////////////////////
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	460b      	mov	r3, r1
 80020ea:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SOFTWARE_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_SOFTWARE_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRR = GPIO_Pin;
 80020ec:	887a      	ldrh	r2, [r7, #2]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	611a      	str	r2, [r3, #16]
}
 80020f2:	bf00      	nop
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bc80      	pop	{r7}
 80020fa:	4770      	bx	lr

080020fc <GPIO_EXTILineConfig>:
////////////////////////////////////////////////////////
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b085      	sub	sp, #20
 8002100:	af00      	add	r7, sp, #0
 8002102:	4603      	mov	r3, r0
 8002104:	460a      	mov	r2, r1
 8002106:	71fb      	strb	r3, [r7, #7]
 8002108:	4613      	mov	r3, r2
 800210a:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 800210c:	2300      	movs	r3, #0
 800210e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_SOFTWARE_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_SOFTWARE_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 8002110:	79bb      	ldrb	r3, [r7, #6]
 8002112:	f003 0303 	and.w	r3, r3, #3
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	220f      	movs	r2, #15
 800211a:	fa02 f303 	lsl.w	r3, r2, r3
 800211e:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 8002120:	4a15      	ldr	r2, [pc, #84]	; (8002178 <GPIO_EXTILineConfig+0x7c>)
 8002122:	79bb      	ldrb	r3, [r7, #6]
 8002124:	089b      	lsrs	r3, r3, #2
 8002126:	b2db      	uxtb	r3, r3
 8002128:	3302      	adds	r3, #2
 800212a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	43db      	mvns	r3, r3
 8002132:	4811      	ldr	r0, [pc, #68]	; (8002178 <GPIO_EXTILineConfig+0x7c>)
 8002134:	79b9      	ldrb	r1, [r7, #6]
 8002136:	0889      	lsrs	r1, r1, #2
 8002138:	b2c9      	uxtb	r1, r1
 800213a:	401a      	ands	r2, r3
 800213c:	1c8b      	adds	r3, r1, #2
 800213e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
 8002142:	4a0d      	ldr	r2, [pc, #52]	; (8002178 <GPIO_EXTILineConfig+0x7c>)
 8002144:	79bb      	ldrb	r3, [r7, #6]
 8002146:	089b      	lsrs	r3, r3, #2
 8002148:	b2db      	uxtb	r3, r3
 800214a:	3302      	adds	r3, #2
 800214c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002150:	79f9      	ldrb	r1, [r7, #7]
 8002152:	79bb      	ldrb	r3, [r7, #6]
 8002154:	f003 0303 	and.w	r3, r3, #3
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	fa01 f303 	lsl.w	r3, r1, r3
 800215e:	4806      	ldr	r0, [pc, #24]	; (8002178 <GPIO_EXTILineConfig+0x7c>)
 8002160:	79b9      	ldrb	r1, [r7, #6]
 8002162:	0889      	lsrs	r1, r1, #2
 8002164:	b2c9      	uxtb	r1, r1
 8002166:	431a      	orrs	r2, r3
 8002168:	1c8b      	adds	r3, r1, #2
 800216a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800216e:	bf00      	nop
 8002170:	3714      	adds	r7, #20
 8002172:	46bd      	mov	sp, r7
 8002174:	bc80      	pop	{r7}
 8002176:	4770      	bx	lr
 8002178:	40010000 	.word	0x40010000

0800217c <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8002184:	4a05      	ldr	r2, [pc, #20]	; (800219c <NVIC_PriorityGroupConfig+0x20>)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800218c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002190:	60d3      	str	r3, [r2, #12]
}
 8002192:	bf00      	nop
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	bc80      	pop	{r7}
 800219a:	4770      	bx	lr
 800219c:	e000ed00 	.word	0xe000ed00

080021a0 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b087      	sub	sp, #28
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80021a8:	2300      	movs	r3, #0
 80021aa:	617b      	str	r3, [r7, #20]
 80021ac:	2300      	movs	r3, #0
 80021ae:	613b      	str	r3, [r7, #16]
 80021b0:	230f      	movs	r3, #15
 80021b2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	78db      	ldrb	r3, [r3, #3]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d03a      	beq.n	8002232 <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80021bc:	4b27      	ldr	r3, [pc, #156]	; (800225c <NVIC_Init+0xbc>)
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	43db      	mvns	r3, r3
 80021c2:	0a1b      	lsrs	r3, r3, #8
 80021c4:	f003 0307 	and.w	r3, r3, #7
 80021c8:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	f1c3 0304 	rsb	r3, r3, #4
 80021d0:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 80021d2:	68fa      	ldr	r2, [r7, #12]
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	fa22 f303 	lsr.w	r3, r2, r3
 80021da:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	785b      	ldrb	r3, [r3, #1]
 80021e0:	461a      	mov	r2, r3
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	789b      	ldrb	r3, [r3, #2]
 80021ee:	461a      	mov	r2, r3
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	4013      	ands	r3, r2
 80021f4:	697a      	ldr	r2, [r7, #20]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	011b      	lsls	r3, r3, #4
 80021fe:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8002200:	4a17      	ldr	r2, [pc, #92]	; (8002260 <NVIC_Init+0xc0>)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	6979      	ldr	r1, [r7, #20]
 8002208:	b2c9      	uxtb	r1, r1
 800220a:	4413      	add	r3, r2
 800220c:	460a      	mov	r2, r1
 800220e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	f003 031f 	and.w	r3, r3, #31
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800221a:	4911      	ldr	r1, [pc, #68]	; (8002260 <NVIC_Init+0xc0>)
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	7812      	ldrb	r2, [r2, #0]
 8002220:	0952      	lsrs	r2, r2, #5
 8002222:	b2d2      	uxtb	r2, r2
 8002224:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8002226:	2201      	movs	r2, #1
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800222c:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8002230:	e00f      	b.n	8002252 <NVIC_Init+0xb2>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	f003 031f 	and.w	r3, r3, #31
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800223a:	4909      	ldr	r1, [pc, #36]	; (8002260 <NVIC_Init+0xc0>)
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	7812      	ldrb	r2, [r2, #0]
 8002240:	0952      	lsrs	r2, r2, #5
 8002242:	b2d2      	uxtb	r2, r2
 8002244:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8002246:	2201      	movs	r2, #1
 8002248:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800224a:	f100 0320 	add.w	r3, r0, #32
 800224e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002252:	bf00      	nop
 8002254:	371c      	adds	r7, #28
 8002256:	46bd      	mov	sp, r7
 8002258:	bc80      	pop	{r7}
 800225a:	4770      	bx	lr
 800225c:	e000ed00 	.word	0xe000ed00
 8002260:	e000e100 	.word	0xe000e100

08002264 <RCC_APB2PeriphClockCmd>:
#include "../inc/soft_rcc.h"

/////////////////////functions
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	460b      	mov	r3, r1
 800226e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002270:	78fb      	ldrb	r3, [r7, #3]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d006      	beq.n	8002284 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8002276:	4b09      	ldr	r3, [pc, #36]	; (800229c <RCC_APB2PeriphClockCmd+0x38>)
 8002278:	699a      	ldr	r2, [r3, #24]
 800227a:	4908      	ldr	r1, [pc, #32]	; (800229c <RCC_APB2PeriphClockCmd+0x38>)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4313      	orrs	r3, r2
 8002280:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8002282:	e006      	b.n	8002292 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8002284:	4b05      	ldr	r3, [pc, #20]	; (800229c <RCC_APB2PeriphClockCmd+0x38>)
 8002286:	699a      	ldr	r2, [r3, #24]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	43db      	mvns	r3, r3
 800228c:	4903      	ldr	r1, [pc, #12]	; (800229c <RCC_APB2PeriphClockCmd+0x38>)
 800228e:	4013      	ands	r3, r2
 8002290:	618b      	str	r3, [r1, #24]
}
 8002292:	bf00      	nop
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	bc80      	pop	{r7}
 800229a:	4770      	bx	lr
 800229c:	40021000 	.word	0x40021000

080022a0 <RCC_APB1PeriphClockCmd>:
//////////////////////////////////
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	460b      	mov	r3, r1
 80022aa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80022ac:	78fb      	ldrb	r3, [r7, #3]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d006      	beq.n	80022c0 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80022b2:	4b09      	ldr	r3, [pc, #36]	; (80022d8 <RCC_APB1PeriphClockCmd+0x38>)
 80022b4:	69da      	ldr	r2, [r3, #28]
 80022b6:	4908      	ldr	r1, [pc, #32]	; (80022d8 <RCC_APB1PeriphClockCmd+0x38>)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80022be:	e006      	b.n	80022ce <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80022c0:	4b05      	ldr	r3, [pc, #20]	; (80022d8 <RCC_APB1PeriphClockCmd+0x38>)
 80022c2:	69da      	ldr	r2, [r3, #28]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	43db      	mvns	r3, r3
 80022c8:	4903      	ldr	r1, [pc, #12]	; (80022d8 <RCC_APB1PeriphClockCmd+0x38>)
 80022ca:	4013      	ands	r3, r2
 80022cc:	61cb      	str	r3, [r1, #28]
}
 80022ce:	bf00      	nop
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bc80      	pop	{r7}
 80022d6:	4770      	bx	lr
 80022d8:	40021000 	.word	0x40021000

080022dc <SOFT_TIM_TimeBaseInit>:
#include "../inc/soft_time.h"


void SOFT_TIM_TimeBaseInit(SOFT_TIM_TypeDef* TIMx, SOFT_TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 80022e6:	2300      	movs	r3, #0
 80022e8:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	881b      	ldrh	r3, [r3, #0]
 80022ee:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM2) || (TIMx == TIM3) || (TIMx == TIM4))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	4a1e      	ldr	r2, [pc, #120]	; (800236c <SOFT_TIM_TimeBaseInit+0x90>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d00b      	beq.n	8002310 <SOFT_TIM_TimeBaseInit+0x34>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022fe:	d007      	beq.n	8002310 <SOFT_TIM_TimeBaseInit+0x34>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	4a1b      	ldr	r2, [pc, #108]	; (8002370 <SOFT_TIM_TimeBaseInit+0x94>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d003      	beq.n	8002310 <SOFT_TIM_TimeBaseInit+0x34>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4a1a      	ldr	r2, [pc, #104]	; (8002374 <SOFT_TIM_TimeBaseInit+0x98>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d108      	bne.n	8002322 <SOFT_TIM_TimeBaseInit+0x46>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8002310:	89fb      	ldrh	r3, [r7, #14]
 8002312:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002316:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	885a      	ldrh	r2, [r3, #2]
 800231c:	89fb      	ldrh	r3, [r7, #14]
 800231e:	4313      	orrs	r3, r2
 8002320:	81fb      	strh	r3, [r7, #14]
  }



    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 8002322:	89fb      	ldrh	r3, [r7, #14]
 8002324:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002328:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	88da      	ldrh	r2, [r3, #6]
 800232e:	89fb      	ldrh	r3, [r7, #14]
 8002330:	4313      	orrs	r3, r2
 8002332:	81fb      	strh	r3, [r7, #14]

  TIMx->CR1 = tmpcr1;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	89fa      	ldrh	r2, [r7, #14]
 8002338:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	889a      	ldrh	r2, [r3, #4]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	859a      	strh	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	881a      	ldrh	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	851a      	strh	r2, [r3, #40]	; 0x28

  if ((TIMx == TIM1))
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a07      	ldr	r2, [pc, #28]	; (800236c <SOFT_TIM_TimeBaseInit+0x90>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d104      	bne.n	800235c <SOFT_TIM_TimeBaseInit+0x80>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	7a1b      	ldrb	r3, [r3, #8]
 8002356:	b29a      	uxth	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	829a      	strh	r2, [r3, #20]
}
 8002362:	bf00      	nop
 8002364:	3714      	adds	r7, #20
 8002366:	46bd      	mov	sp, r7
 8002368:	bc80      	pop	{r7}
 800236a:	4770      	bx	lr
 800236c:	40012c00 	.word	0x40012c00
 8002370:	40000400 	.word	0x40000400
 8002374:	40000800 	.word	0x40000800

08002378 <SOFT_TIM_ClearITPendingBit>:

void SOFT_TIM_ClearITPendingBit(SOFT_TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	460b      	mov	r3, r1
 8002382:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8002384:	887b      	ldrh	r3, [r7, #2]
 8002386:	43db      	mvns	r3, r3
 8002388:	b29a      	uxth	r2, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	821a      	strh	r2, [r3, #16]
}
 800238e:	bf00      	nop
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	bc80      	pop	{r7}
 8002396:	4770      	bx	lr

08002398 <SOFT_TIM_ITConfig>:

void SOFT_TIM_ITConfig(SOFT_TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	460b      	mov	r3, r1
 80023a2:	807b      	strh	r3, [r7, #2]
 80023a4:	4613      	mov	r3, r2
 80023a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80023a8:	787b      	ldrb	r3, [r7, #1]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d008      	beq.n	80023c0 <SOFT_TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	899b      	ldrh	r3, [r3, #12]
 80023b2:	b29a      	uxth	r2, r3
 80023b4:	887b      	ldrh	r3, [r7, #2]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	b29a      	uxth	r2, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 80023be:	e009      	b.n	80023d4 <SOFT_TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	899b      	ldrh	r3, [r3, #12]
 80023c4:	b29a      	uxth	r2, r3
 80023c6:	887b      	ldrh	r3, [r7, #2]
 80023c8:	43db      	mvns	r3, r3
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	4013      	ands	r3, r2
 80023ce:	b29a      	uxth	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	819a      	strh	r2, [r3, #12]
}
 80023d4:	bf00      	nop
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	bc80      	pop	{r7}
 80023dc:	4770      	bx	lr

080023de <SOFT_TIM_Cmd>:

void SOFT_TIM_Cmd(SOFT_TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80023de:	b480      	push	{r7}
 80023e0:	b083      	sub	sp, #12
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
 80023e6:	460b      	mov	r3, r1
 80023e8:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80023ea:	78fb      	ldrb	r3, [r7, #3]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d008      	beq.n	8002402 <SOFT_TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	881b      	ldrh	r3, [r3, #0]
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	f043 0301 	orr.w	r3, r3, #1
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
 8002400:	e007      	b.n	8002412 <SOFT_TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	881b      	ldrh	r3, [r3, #0]
 8002406:	b29b      	uxth	r3, r3
 8002408:	f023 0301 	bic.w	r3, r3, #1
 800240c:	b29a      	uxth	r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	801a      	strh	r2, [r3, #0]
}
 8002412:	bf00      	nop
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	bc80      	pop	{r7}
 800241a:	4770      	bx	lr

0800241c <SOFT_TIM_GetFlagStatus>:

FlagStatus SOFT_TIM_GetFlagStatus(SOFT_TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{
 800241c:	b480      	push	{r7}
 800241e:	b085      	sub	sp, #20
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	460b      	mov	r3, r1
 8002426:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;
 8002428:	2300      	movs	r3, #0
 800242a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));

  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	8a1b      	ldrh	r3, [r3, #16]
 8002430:	b29a      	uxth	r2, r3
 8002432:	887b      	ldrh	r3, [r7, #2]
 8002434:	4013      	ands	r3, r2
 8002436:	b29b      	uxth	r3, r3
 8002438:	2b00      	cmp	r3, #0
 800243a:	d002      	beq.n	8002442 <SOFT_TIM_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 800243c:	2301      	movs	r3, #1
 800243e:	73fb      	strb	r3, [r7, #15]
 8002440:	e001      	b.n	8002446 <SOFT_TIM_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8002442:	2300      	movs	r3, #0
 8002444:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002446:	7bfb      	ldrb	r3, [r7, #15]
}
 8002448:	4618      	mov	r0, r3
 800244a:	3714      	adds	r7, #20
 800244c:	46bd      	mov	sp, r7
 800244e:	bc80      	pop	{r7}
 8002450:	4770      	bx	lr
	...

08002454 <__libc_init_array>:
 8002454:	b570      	push	{r4, r5, r6, lr}
 8002456:	2500      	movs	r5, #0
 8002458:	4e0c      	ldr	r6, [pc, #48]	; (800248c <__libc_init_array+0x38>)
 800245a:	4c0d      	ldr	r4, [pc, #52]	; (8002490 <__libc_init_array+0x3c>)
 800245c:	1ba4      	subs	r4, r4, r6
 800245e:	10a4      	asrs	r4, r4, #2
 8002460:	42a5      	cmp	r5, r4
 8002462:	d109      	bne.n	8002478 <__libc_init_array+0x24>
 8002464:	f000 f822 	bl	80024ac <_init>
 8002468:	2500      	movs	r5, #0
 800246a:	4e0a      	ldr	r6, [pc, #40]	; (8002494 <__libc_init_array+0x40>)
 800246c:	4c0a      	ldr	r4, [pc, #40]	; (8002498 <__libc_init_array+0x44>)
 800246e:	1ba4      	subs	r4, r4, r6
 8002470:	10a4      	asrs	r4, r4, #2
 8002472:	42a5      	cmp	r5, r4
 8002474:	d105      	bne.n	8002482 <__libc_init_array+0x2e>
 8002476:	bd70      	pop	{r4, r5, r6, pc}
 8002478:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800247c:	4798      	blx	r3
 800247e:	3501      	adds	r5, #1
 8002480:	e7ee      	b.n	8002460 <__libc_init_array+0xc>
 8002482:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002486:	4798      	blx	r3
 8002488:	3501      	adds	r5, #1
 800248a:	e7f2      	b.n	8002472 <__libc_init_array+0x1e>
 800248c:	080024e8 	.word	0x080024e8
 8002490:	080024e8 	.word	0x080024e8
 8002494:	080024e8 	.word	0x080024e8
 8002498:	080024ec 	.word	0x080024ec

0800249c <memset>:
 800249c:	4603      	mov	r3, r0
 800249e:	4402      	add	r2, r0
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d100      	bne.n	80024a6 <memset+0xa>
 80024a4:	4770      	bx	lr
 80024a6:	f803 1b01 	strb.w	r1, [r3], #1
 80024aa:	e7f9      	b.n	80024a0 <memset+0x4>

080024ac <_init>:
 80024ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024ae:	bf00      	nop
 80024b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024b2:	bc08      	pop	{r3}
 80024b4:	469e      	mov	lr, r3
 80024b6:	4770      	bx	lr

080024b8 <_fini>:
 80024b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024ba:	bf00      	nop
 80024bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024be:	bc08      	pop	{r3}
 80024c0:	469e      	mov	lr, r3
 80024c2:	4770      	bx	lr
